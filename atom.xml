<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gcoder</title>
  
  <subtitle>www.gcoder5.com</subtitle>
  <link href="https://gcoder5.com/atom.xml" rel="self"/>
  
  <link href="https://gcoder5.com/"/>
  <updated>2023-05-16T23:11:29.006Z</updated>
  <id>https://gcoder5.com/</id>
  
  <author>
    <name>Gcoder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python中使用下划线的N种场景</title>
    <link href="https://gcoder5.com/2023/05/17/python%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84N%E7%A7%8D%E5%9C%BA%E6%99%AF/"/>
    <id>https://gcoder5.com/2023/05/17/python%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84N%E7%A7%8D%E5%9C%BA%E6%99%AF/</id>
    <published>2023-05-16T22:20:49.000Z</published>
    <updated>2023-05-16T23:11:29.006Z</updated>
    
    <content type="html"><![CDATA[<p>本来是打算慢慢出一期<code>python</code>的基础入门的，但是吧昨天阿平哥给我推了个b站的资源学习，这个资源就是讲了关于python下划线的多种使用场景，我觉得这个知识点是很值得学习一下的，所以就记录下来分享一下，那我们下面就开始下划线的神奇用法！</p><h3 id="第一种：使用python控制台的最后一个结果"><a href="#第一种：使用python控制台的最后一个结果" class="headerlink" title="第一种：使用python控制台的最后一个结果"></a>第一种：使用<code>python</code>控制台的最后一个结果</h3><p>首先，我们可以打开一个python的解释器（打开windows的终端，然后输入<code>python</code>）来进行模拟演示</p><p><img src="https://p.ipic.vip/lvkqf3.png" alt="image-20230517062728025"></p><p>我们可以输入如下的计算，来验证下划线的用法：</p><p><img src="https://p.ipic.vip/7kl5uz.png" alt="image-20230517062833803"></p><p>我们可以看到，我们写的下划线代表的就是上面的计算中，最后一次的结果值，这就是下划线的第一种用法。但是我们要记住，这种用法仅限于在python解释器种的使用~</p><h3 id="第二种：作为千分号使用"><a href="#第二种：作为千分号使用" class="headerlink" title="第二种：作为千分号使用"></a>第二种：作为千分号使用</h3><p>这个用法比较简单，我们就直接上图哈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">number: <span class="hljs-built_in">int</span> = <span class="hljs-number">10_000_000</span><br><span class="hljs-built_in">print</span>(number)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输出结果</span><br>10000000<br></code></pre></td></tr></table></figure><h3 id="第三种：用来代表一个不重要的值"><a href="#第三种：用来代表一个不重要的值" class="headerlink" title="第三种：用来代表一个不重要的值"></a>第三种：用来代表一个不重要的值</h3><p>虽然说我们下划线可以用来作为变量名，但实际上我们在编程过程中，会将下划线定义的变量表示一个不重要的值，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">_=<span class="hljs-number">10</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>  <span class="hljs-built_in">print</span>(_)<br></code></pre></td></tr></table></figure><h3 id="第四种：开箱元组"><a href="#第四种：开箱元组" class="headerlink" title="第四种：开箱元组"></a>第四种：开箱元组</h3><p>在元组的解包中，我们可以通过下划线来获取局部的元组元素，达到我们想要的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">sample_tuple = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-comment"># 我们只获取1和3</span><br>a, _, b, _ = sample_tuple<br><span class="hljs-built_in">print</span>(a,b)<br><span class="hljs-comment"># 除去头尾 我们只获取中间的值</span><br>a, *_, b = sample_tuple<br><span class="hljs-built_in">print</span>(_)<br></code></pre></td></tr></table></figure><h3 id="第五种：在变量或者函数前加上下划线"><a href="#第五种：在变量或者函数前加上下划线" class="headerlink" title="第五种：在变量或者函数前加上下划线"></a>第五种：在变量或者函数前加上下划线</h3><h4 id="1-只加一个下划线"><a href="#1-只加一个下划线" class="headerlink" title="1.只加一个下划线"></a>1.只加一个下划线</h4><p>比如我们在某个类的变量或者函数前加上一个下划线的话，那么就表示我们这个变量或者函数是受保护的，那么我们的多数编辑器就不会智能提示我们可以使用该方法（正常而言，受保护的变量和函数我们习惯上只在当前类去使用，但是如果外部来获取的话，我们也不会阻止）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> uuid4<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._<span class="hljs-built_in">id</span> = uuid4()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_id</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._<span class="hljs-built_in">id</span><br><br><br>user = User()<br><span class="hljs-built_in">print</span>(user._get_id())<br></code></pre></td></tr></table></figure><h4 id="2-加两个下划线"><a href="#2-加两个下划线" class="headerlink" title="2.加两个下划线"></a>2.加两个下划线</h4><p>当前，我们也可以在前面加上两个下划线，这样的话就表示这个变量或者函数是私有属性，外部是访问不了的，我们可以就上面的函数改一下，然后看看运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> uuid4<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__<span class="hljs-built_in">id</span> = uuid4()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get_id</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__<span class="hljs-built_in">id</span><br><br><br>user = User()<br><span class="hljs-built_in">print</span>(user.__get_id())<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">运行结果</span><br>AttributeError: &#x27;User&#x27; object has no attribute &#x27;__get_id&#x27;<br></code></pre></td></tr></table></figure><h3 id="第六种：让关键字可以作为变量名"><a href="#第六种：让关键字可以作为变量名" class="headerlink" title="第六种：让关键字可以作为变量名"></a>第六种：让关键字可以作为变量名</h3><p>这个就是比较简单理解了，如果我们的变量名是想用关键字，那么我们就可以在关键字后面加上一个下划线来表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">if_= <span class="hljs-number">10</span><br>class_ = <span class="hljs-string">&#x27;class&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="第七种：重写双下函数"><a href="#第七种：重写双下函数" class="headerlink" title="第七种：重写双下函数"></a>第七种：重写双下函数</h3><p>我们知道我们的类里面有很多的内置函数（也就是双下函数），比如<code>__init__</code>和<code>__int__</code>和<code>__str__</code>等等，我们下面举个例子来说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> uuid4<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animals</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._<span class="hljs-built_in">id</span> = uuid4()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Animals:<span class="hljs-subst">&#123;self._<span class="hljs-built_in">id</span>&#125;</span>&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__int__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span><br><br><br>animals = Animals()<br><span class="hljs-built_in">print</span>(animals)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">99</span> + <span class="hljs-built_in">int</span>(animals))<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输出结果</span><br>Animals:f4e896d1-235a-4d46-8fb4-b60d72c03a3b<br>199<br></code></pre></td></tr></table></figure><p>综上，就是七种关于下划线在<code>python</code>中的使用场景了，很多技术都是日积月累的，而不是一蹴而就，坚持学习才能收获良多！</p>]]></content>
    
    
    <summary type="html">python的下划线有什么神奇的地方呢</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://gcoder5.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>五一前后都在忙啥呢</title>
    <link href="https://gcoder5.com/2023/05/12/%E4%BA%94%E4%B8%80%E5%89%8D%E5%90%8E%E9%83%BD%E5%9C%A8%E5%BF%99%E5%95%A5%E5%91%A2/"/>
    <id>https://gcoder5.com/2023/05/12/%E4%BA%94%E4%B8%80%E5%89%8D%E5%90%8E%E9%83%BD%E5%9C%A8%E5%BF%99%E5%95%A5%E5%91%A2/</id>
    <published>2023-05-12T14:32:36.000Z</published>
    <updated>2023-05-12T14:50:09.485Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近比较忙，但是又不能因此停止学习。但是吧，实际上最近忙碌，不过也还在不断学习。最近学的东西也有点多，比如学了个<code>rpa</code>入门，用<code>robotfreamwork</code>的<code>ride</code>工具进行了一波简单的实践，真的有意思；又比如学了个<code>python</code>爬虫，不过这个还在进行中，等学习好了再输出一波学习心得供大家参考；又比如最近在看一下金融业务架构，想了解一波架构设计的一些思路等等。</p><p>刚好今天是比较有时间的，因为带家人出来旅游了，晚上有时间就来吹吹水，先预热更新一下。这两天再写一些技术分享文来跟大家进行无言的交流。</p><h3 id="叙事"><a href="#叙事" class="headerlink" title="叙事"></a>叙事</h3><p>五一前后呢，确实是比较忙的，一方面是刚当爹嘛，天天在享受天伦之乐，有点飘飘然的；其次吧，现在的工作还是比较忙的，并且工作的心情并没有很好；再者就是学习的时间挪到早上了，博文来不及写，每天要学习的东西都比较多且杂，待我整理整理。</p><h3 id="强行鸡汤"><a href="#强行鸡汤" class="headerlink" title="强行鸡汤"></a>强行鸡汤</h3><p>忙碌确实存在于任何人身上，大多数人都是很忙，忙到自己不知道自己忙什么，忙到生活和工作都区分不开了，忙到情绪失控。but，我感觉这才是常态，如果不忙碌，那么生活可能就会缺点意思了。我们现在所经历的事情，但凡是美好的舒服的，都是属于自己的小幸运，而不开心的为难的烦躁的才是人生的常态。所以不要跟自己过不去，因为人生得不得意都需要尽欢。有些人很厉害了，但是他们还很努力，他们忙碌的生活中总有一部分拿来不断学习成长的时间，这个是值得我们深思的。为啥他们那么优秀，那么忙碌，还能有足够的时间拿来学习，而我们呢？每天累死累活的，回家只想躺着，他们是如何做到的呢？</p><p>诚然，上文抛了个问题，我们都思考过，但是我们并没有足够的耐心和坚定的决心拿来鞭策自己，终归还是我们太懒惰了。懒惰决定一个人的上限，如果上限有条件，那么戒掉懒惰是改变上限的首要条件。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>最近，新冠和流感又猖獗了。而我也没有逃过流感，长时间的忙碌让自己有点顶不住流感来袭，最终还是中招了。在这里温馨提醒各位小伙伴们，注意身体，因为身体才是革命的本钱，只要身体状况不佳，那么自己的短期计划必定会落空。所以把健康运动和坚持学习放在自己的脑中，最后祝各位小伙伴身体健康，步步高升！</p>]]></content>
    
    
    <summary type="html">忙碌是无处不在的，时间是靠自己挤的！</summary>
    
    
    
    <category term="杂谈" scheme="https://gcoder5.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="生活" scheme="https://gcoder5.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>谈谈Java8的函数式接口</title>
    <link href="https://gcoder5.com/2023/04/21/%E8%B0%88%E8%B0%88Java8%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>https://gcoder5.com/2023/04/21/%E8%B0%88%E8%B0%88Java8%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</id>
    <published>2023-04-20T22:22:10.000Z</published>
    <updated>2023-04-21T07:46:01.247Z</updated>
    
    <content type="html"><![CDATA[<p>Java8作为稳定版的老一代，作为不再被维护的一代，作为即将被抛弃的一代。它的新特性和较前面版本的变化是大的，是为后来者的开发提供了便利性，为后来者的代码开发提供了更为简洁的写法。今天我们就来一起学习下Java8的函数式接口。</p><h3 id="什么是函数式接口"><a href="#什么是函数式接口" class="headerlink" title="什么是函数式接口"></a>什么是函数式接口</h3><p>使用注解<code>@FunctionalInterface</code>标识，并且只包含一个<code>抽象方法</code>的接口是<code>函数式接口</code>。</p><h3 id="函数式接口的分类（四大核心函数式接口）"><a href="#函数式接口的分类（四大核心函数式接口）" class="headerlink" title="函数式接口的分类（四大核心函数式接口）"></a>函数式接口的分类（四大核心函数式接口）</h3><h4 id="1-Supplier供给型接口"><a href="#1-Supplier供给型接口" class="headerlink" title="1.Supplier供给型接口"></a>1.<code>Supplier</code>供给型接口</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><blockquote><p><code>java.util.function.Supplier&lt;T&gt;</code> 接口定义了一个<code> get</code> 的抽象方法，它没有参数，返回一个泛型T的对象，其函数描述符为 <code>() -&gt; T</code>，如果不接受入参，直接为我们生产一个指定的结果，那么就可以用Supplier<T>，这类似于一个工厂方法,通常称为<strong>功能型接口</strong>。</p><p><span style="color:red"><strong>Supplier不接受参数、只返回数据</strong></span></p></blockquote><p><img src="https://p.ipic.vip/67nfaa.png" alt="image-20230421064410206"></p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>外部配置文件<code>Properties</code>文件读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Supplier使用示例</span><br><span class="hljs-comment">     * 读取外部配置文件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileName 文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> util.Properties</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">readFile</span><span class="hljs-params">(String fileName)</span> &#123;<br>        Supplier&lt;Properties&gt; supplier = () -&gt;&#123;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Test1.class.getClassLoader().getResourceAsStream(fileName);) &#123;<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>                properties.load(is);<br>                <span class="hljs-keyword">return</span> properties;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> supplier.get();<br>    &#125;<br></code></pre></td></tr></table></figure><p>作为函数参数来使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 作为函数参数使用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> supplier supplier</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Supplier&lt;String&gt; supplier)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> supplier.get();<br>        System.out.println(s);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-Consumer消费型接口"><a href="#2-Consumer消费型接口" class="headerlink" title="2.Consumer消费型接口"></a>2.<code>Consumer</code>消费型接口</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><blockquote><p><code>java.util.function.Consumer&lt;T&gt; </code>接口定义了一个名叫 <code>accept </code>的抽象方法，它接受泛型 T，没有返回值(void)。如果需要访问类型 T 的对象，并对其执行某些操作，可以使用这个接口，通常称为<strong>消费型接口</strong>。</p><p><span style="color:red"><strong>Consumer只接受一个参数、没有返回值</strong></span></p></blockquote><p><img src="https://p.ipic.vip/4m7mi7.png" alt="image-20230421065442006"></p><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><p>消费字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        acceptString(<span class="hljs-string">&quot;gcoder&quot;</span>,s -&gt; &#123;<br>            String[] split = s.split(<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">join</span> <span class="hljs-operator">=</span> String.join(<span class="hljs-string">&quot;-&quot;</span>, split);<br>            System.out.println(<span class="hljs-string">&quot;join = &quot;</span> + join);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str      str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> consumer consumer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptString</span><span class="hljs-params">(String str, Consumer&lt;String&gt; consumer)</span> &#123;<br>        consumer.accept(str);<br>    &#125;<br></code></pre></td></tr></table></figure><p>连续消费字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        acceptString2(<span class="hljs-string">&quot;gcoder&quot;</span>, s -&gt; &#123;<br>                    String[] split = s.split(<span class="hljs-string">&quot;&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">join</span> <span class="hljs-operator">=</span> String.join(<span class="hljs-string">&quot;-&quot;</span>, split);<br>                    System.out.println(<span class="hljs-string">&quot;join = &quot;</span> + join);<br>                &#125;, s -&gt; &#123;<br>                    System.out.println(s + <span class="hljs-string">&quot;第二次消费&quot;</span>);<br>                &#125;<br>        );<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str       str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> consumer1 consumer1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> consumer2 consumer2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptString2</span><span class="hljs-params">(String str, Consumer&lt;String&gt; consumer1, Consumer&lt;String&gt; consumer2)</span> &#123;<br>        consumer1.andThen(consumer2).accept(str);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="3-Predicate断定型接口"><a href="#3-Predicate断定型接口" class="headerlink" title="3.Predicate断定型接口"></a>3.<code>Predicate</code>断定型接口</h4><h5 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h5><blockquote><p><code>java.util.function.Predicate</code>接口，是一个断定型接口，用于对指定类型的数据进行判断，从而得到一个判断结果（boolean类型的值）。</p></blockquote><p><img src="https://p.ipic.vip/zo1vt1.png" alt="image-20230421100428546"></p><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><ol><li><p><code>boolean test(T t)</code> ，用于条件判断</p><p><img src="https://p.ipic.vip/uebyni.png" alt="image-20230421100641244"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> checkStr(<span class="hljs-string">&quot;test&quot;</span>, s -&gt; s.length() == <span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">&quot;test = &quot;</span> + test);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> predicate predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkStr</span><span class="hljs-params">(String str,Predicate&lt;String&gt; predicate)</span> &#123;<br>       <span class="hljs-keyword">return</span> predicate.test(str);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other)</code>，用于将两个<code>Prediccate</code>进行逻辑<code>与</code>判断</p><p><img src="https://p.ipic.vip/aqdi0f.png" alt="image-20230421125731774"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> checkStr(<span class="hljs-string">&quot;test&quot;</span>, s -&gt; s.length() == <span class="hljs-number">4</span>, s -&gt; s.equals(<span class="hljs-string">&quot;qwer&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;test = &quot;</span> + test);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多个条件判断字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p1  predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p2  predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkStr</span><span class="hljs-params">(String str, Predicate&lt;String&gt; p1, Predicate&lt;String&gt; p2)</span> &#123;<br>        <span class="hljs-keyword">return</span> p1.and(p2).test(str);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Predicate&lt;T&gt; negate()</code>，用于取反判断</p><p><img src="https://p.ipic.vip/vcwrsz.png" alt="image-20230421143508045"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> checkStr2(<span class="hljs-string">&quot;test&quot;</span>, s -&gt; s.length() != <span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">&quot;test = &quot;</span> + test);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取反判断字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p1  predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkStr2</span><span class="hljs-params">(String str, Predicate&lt;String&gt; p1)</span> &#123;<br>        <span class="hljs-keyword">return</span> p1.negate().test(str);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other)</code>，用于两个<code>Predicate</code>的逻辑”或“判断</p><p><img src="https://p.ipic.vip/igyjhp.png" alt="image-20230421145331669"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> checkStr2(<span class="hljs-string">&quot;test&quot;</span>, s -&gt; s.length() == <span class="hljs-number">4</span>,s -&gt; s.contains(<span class="hljs-string">&quot;z&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;test = &quot;</span> + test);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多个条件判断字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p1  predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p2  predicate</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkStr2</span><span class="hljs-params">(String str, Predicate&lt;String&gt; p1, Predicate&lt;String&gt; p2)</span> &#123;<br>        <span class="hljs-keyword">return</span> p1.or(p2).test(str);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-Function函数型接口"><a href="#4-Function函数型接口" class="headerlink" title="4.Function函数型接口"></a>4.<code>Function</code>函数型接口</h4><h5 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h5><blockquote><p><code>java.util.function.Function</code>接口，是一个函数型接口，用来根据一个类型的数据得到另外一个类型的数据</p></blockquote><p><img src="https://p.ipic.vip/ox7xo5.png" alt="image-20230421145837347"></p><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><ol><li><p>抽象方法<code>R apply(T t)</code>，根据类型T的参数获取类型R的结果</p><p><img src="https://p.ipic.vip/9kajtq.png" alt="image-20230421145933644"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> applyMethod(<span class="hljs-string">&quot;12345&quot;</span>, Integer::parseInt);<br>        System.out.println(<span class="hljs-string">&quot;integer = &quot;</span> + integer);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字符串整数的转换</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str      str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> function function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Integer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gaohuiwu</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">applyMethod</span><span class="hljs-params">(String str, Function&lt;String, Integer&gt; function)</span> &#123;<br>        <span class="hljs-keyword">return</span> function.apply(str);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>&lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before)</code>,获取apply的function</p><p><img src="https://p.ipic.vip/b8peo7.png" alt="image-20230421151122322"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> applyMethod(<span class="hljs-string">&quot;12345&quot;</span>, s -&gt; s + <span class="hljs-string">&quot;777&quot;</span>, s -&gt; s + <span class="hljs-string">&quot;666&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;s1 = &quot;</span> + s1);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 先执行前置函数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> f1  function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> f2  function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Integer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gaohuiwu</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">applyMethod</span><span class="hljs-params">(String str, Function&lt;String, String&gt; f1, Function&lt;String, String&gt; f2)</span> &#123;<br>        <span class="hljs-keyword">return</span> f1.compose(f2).apply(str);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>&lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after)</code>,用来进行组合操作，即：”先做什么，再做什么“的场景</p><p><img src="https://p.ipic.vip/nnsdk4.png" alt="image-20230421154110020"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> applyMethod2(<span class="hljs-string">&quot;12345&quot;</span>, s -&gt; s + <span class="hljs-string">&quot;777&quot;</span>, s -&gt; s + <span class="hljs-string">&quot;666&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;s1 = &quot;</span> + s1);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行后置函数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> f1  function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> f2  function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Integer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gaohuiwu</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-04-21</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">applyMethod2</span><span class="hljs-params">(String str, Function&lt;String, String&gt; f1, Function&lt;String, String&gt; f2)</span> &#123;<br>        <span class="hljs-keyword">return</span> f1.andThen(f2).apply(str);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><p>以上就是四大核心函数式接口了，在我们的代码开发过程中，实际上就可以借这些代码来简化我们的代码，除去复杂的多重if判断的场景等。函数式编程是比较自由的，并且它的灵活性很高，也够独立，所以善用函数式编程会让我们的编码更加的简洁美好，可读性更高。</p><hr><p>今天的分享就到这了～谢谢阅读！</p>]]></content>
    
    
    <summary type="html">Java8的特性</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java8" scheme="https://gcoder5.com/tags/Java8/"/>
    
    <category term="Lambda" scheme="https://gcoder5.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Springboot可以同时处理多少个请求呢</title>
    <link href="https://gcoder5.com/2023/04/20/Springboot%E5%8F%AF%E4%BB%A5%E5%90%8C%E6%97%B6%E5%A4%84%E7%90%86%E5%A4%9A%E5%B0%91%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%91%A2/"/>
    <id>https://gcoder5.com/2023/04/20/Springboot%E5%8F%AF%E4%BB%A5%E5%90%8C%E6%97%B6%E5%A4%84%E7%90%86%E5%A4%9A%E5%B0%91%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%91%A2/</id>
    <published>2023-04-20T04:26:52.000Z</published>
    <updated>2023-04-20T14:33:18.226Z</updated>
    
    <content type="html"><![CDATA[<p>最近耽误了些时间写博文，实际上是没时间来更新。工作和生活的平衡杆还没有熟悉，所以处理得还不是很好。不过还好今天有时间了。</p><p>言归正传，这两天看到了一个博文的推送，标题是<code>Springboot可以同时处理多少个请求</code>？这不禁引起了我的好奇，因为我也从没有认真关注过这个问题，所以我认真研读了一下，将读后感以及自己的一些实践记录下来。</p><h3 id="springBoot-Web的启动过程"><a href="#springBoot-Web的启动过程" class="headerlink" title="springBoot Web的启动过程"></a>springBoot Web的启动过程</h3><p>首先，我们在讲<code>springboot</code>可以同时并发多少个请求时，我们先来了解<code>springboot</code>的启动过程，我们都知道springboot有内嵌tomcat，所以我们启动的时候只需要<code>java -jar</code>就可以，那具体的过程我们一起来学习下。</p><p><code>java -jar</code>的启动方式，我们就离开一个文件，那就是描述文件<code>MMANIFEST.MF</code>。以下是我到<code>start.spring.io</code>去生成的一个<code>springboot web</code>工程，工程很简单，只有一个<code>spring-boot-starter-web</code>依赖，然后我通过<code>mvn clean package</code>打包之后，用反编译工具去查看它的jar包。</p><p><img src="https://p.ipic.vip/0ay5o5.png" alt="image-20230420203442536"></p><p>我们可以看到描述文件里有两个关键的配置<code>Main-Class</code>和<code>Start-Claass</code>，对于<code>Main-class</code>我们可能会比较熟悉，因为我们在打包普通的java工程的时候，需要指定这个入口类。那接下来我们就跟着这个入口类来看看当我们用<code>java -jar</code>去启动的时候，<code>springboot</code>这个工程它到底发生了什么事儿～</p><p><code>JarLauncher.class</code></p><p>我们到了主入口类，</p><p><img src="https://p.ipic.vip/q3wvg1.png" alt="image-20230420210532044"></p><p><code>main</code>方法直接调用了爷爷类的<code>launch</code>方法</p><p><img src="https://p.ipic.vip/cnkvcb.png" alt="image-20230420211814949"></p><p>在<code>launch</code>方法中干了两件事，第一件就是获取了类加载器（<code>classLoader</code>），另一件就是通过<code>getMainClass()</code>方法获取了<code>springboot</code>的启动类，我们把目光放到<code>this.getMainClass()</code>，然后我们就在爷爷类里找这个方法<br><img src="https://p.ipic.vip/7v3k6x.png" alt="image-20230420212016253"></p><p>很明显，这是一个抽象类，那我们就去<code>JarLauncher</code>的父类<code>ExecutableArchiveLauncher</code>里找，果然被我们找到了它的具体实现：</p><p><img src="https://p.ipic.vip/oryvqc.png" alt="image-20230420212145090"></p><p>我们可以看到方法里很简单的逻辑，首先呢获取到描述文件<code>MANIFEST.MF</code>，然后从描述文件中找到<code>Start-Class</code>，这个是不是很熟悉呢，没错，我们往上翻可以看到这个就是我们<code>springboot</code>的启动类。</p><p>ok，到了这里我们已经知道了<code>Start-Class</code>和<code>Main-Class</code>的关联关系了，那我们回去爷爷类的<code>launch</code>方法，最后一行我们可以知道它调用了一个重载后的<code>launch</code>方法，我们进入到这个方法里去一探究竟！</p><p><img src="https://p.ipic.vip/qjlmmo.png" alt="image-20230420212734079"></p><p>我们可以看到这个方法中去实例化了一个<code>MainMethodRunner</code>对象，然后执行了它的<code>run</code>方法，我们来看一下这个<code>MainMethodRunner</code>是个什么东西？</p><p><img src="https://p.ipic.vip/19hl6i.png" alt="image-20230420212906781"></p><p>我们可以从上面的源码看到<code>run</code>方法，是不是很熟悉呢？是的，这里用到了反射去执行了<code>springboot</code>中的<code>main</code>方法。</p><p>到这里，我们算是搞清楚了从<code>JarLauncher</code>到启动类的一整个过程，然而我们都知道web项目是运行在web容器当中的，而<code>springboot</code>内置了<code>tomcat</code>，那么启动类的<code>main</code>方法又是如何启动tomcat呢？我们花点时间继续来拜读下<code>main</code>方法的源码。</p><p><img src="https://p.ipic.vip/a77l3j.png" alt="image-20230420213512454"></p><p>话不多说，我们直入<code>run</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Run the Spring application, creating and refreshing a new</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> ApplicationContext&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args the application arguments (usually passed from a Java main method)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a running &#123;<span class="hljs-doctag">@link</span> ApplicationContext&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.nanoTime();<br><span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br>   <span class="hljs-comment">// 此处定义了spring容器</span><br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>configureHeadlessProperty();<br><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br>listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>configureIgnoreBeanInfo(environment);<br><span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br>     <span class="hljs-comment">// 创建spring容器AnnotationConfigServletWebServerApplicationContext</span><br>context = createApplicationContext();<br>context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br><span class="hljs-comment">// 初始化容器</span><br>     refreshContext(context);<br>afterRefresh(context, applicationArguments);<br><span class="hljs-type">Duration</span> <span class="hljs-variable">timeTakenToStartup</span> <span class="hljs-operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);<br>&#125;<br>listeners.started(context, timeTakenToStartup);<br>callRunners(context, applicationArguments);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleRunFailure(context, ex, listeners);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Duration</span> <span class="hljs-variable">timeTakenToReady</span> <span class="hljs-operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);<br>listeners.ready(context, timeTakenToReady);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleRunFailure(context, ex, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们大概过一下上面的代码流程，就是创建了个spring容器，然后初始化，那我们到初始化再瞧一瞧</p><p><img src="https://p.ipic.vip/s9m15c.png" alt="image-20230420214128410"></p><p>该方法又调用了<code>refresh</code>方法，一路<code>refresh</code>下去，最终调用了<code>AbstractApplicationContext</code>的<code>refresh</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.startupShutdownMonitor) &#123;<br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">contextRefresh</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.refresh&quot;</span>);<br><br><span class="hljs-comment">// Prepare this context for refreshing.</span><br>prepareRefresh();<br><br><span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span><br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> obtainFreshBeanFactory();<br><br><span class="hljs-comment">// Prepare the bean factory for use in this context. 初始化bean（因为这不是我们本文重点，我们就不展开说了）</span><br>prepareBeanFactory(beanFactory);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span><br>postProcessBeanFactory(beanFactory);<br><br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanPostProcess</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.beans.post-process&quot;</span>);<br><span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span><br>invokeBeanFactoryPostProcessors(beanFactory);<br><br><span class="hljs-comment">// Register bean processors that intercept bean creation.</span><br>registerBeanPostProcessors(beanFactory);<br>beanPostProcess.end();<br><br><span class="hljs-comment">// Initialize message source for this context.</span><br>initMessageSource();<br><br><span class="hljs-comment">// Initialize event multicaster for this context.</span><br>initApplicationEventMulticaster();<br><br><span class="hljs-comment">// Initialize other special beans in specific context subclasses. Spring Boot实现了该方法创建了web容器，这是我们想要看的东西！</span><br>onRefresh();<br><br><span class="hljs-comment">// Check for listener beans and register them.</span><br>registerListeners();<br><br><span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br>finishBeanFactoryInitialization(beanFactory);<br><br><span class="hljs-comment">// Last step: publish corresponding event.</span><br>finishRefresh();<br>&#125;<br><br><span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br><span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +<br><span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);<br>&#125;<br><br><span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span><br>destroyBeans();<br><br><span class="hljs-comment">// Reset &#x27;active&#x27; flag.</span><br>cancelRefresh(ex);<br><br><span class="hljs-comment">// Propagate exception to caller.</span><br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><br><span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// Reset common introspection caches in Spring&#x27;s core, since we</span><br><span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span><br>resetCommonCaches();<br>contextRefresh.end();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到<code>onRefresh</code>的多种实现</p><p><img src="https://p.ipic.vip/abvv6v.png" alt="image-20230420214618948"></p><p>很明显，我们直接到<code>ServletWebServerApplicationContext</code>的<code>onRefresh</code>方法中：</p><p><img src="https://p.ipic.vip/g1fkg5.png" alt="image-20230420214732956"></p><p>一眼我们就看到我们苦苦寻找的东西！<span style="color:red"><strong>createWebServer()</strong></span></p><p><img src="https://p.ipic.vip/dv9ykc.png" alt="image-20230420220110653">以上代码通过<code>ServletWebServerFactory </code>工厂类的<code>getWebServer</code>方法创建了web容器。</p><p><img src="https://p.ipic.vip/tbpspw.png" alt="image-20230420220223411"></p><p>从上面的实现，我们可以看到实际上<code>springboot</code>内置了<code>Jetty</code>、<code>Tomcat</code>、<code>Undertow</code>三种web容器，因为我们主要是讲的<code>Tomcat</code>，所以我们就进到<code>TomcatServletWebServerFactory</code>这个工厂类去揭开创建<code>tomcat</code>容器的面纱</p><p><img src="https://p.ipic.vip/gy4jsd.png" alt="image-20230420220924051"></p><p>我们可以大概看到整个<code>tomcat</code>的构造过程，那最后的<code>getTomcatWebServer(tomcat)</code>，又将整个构建好的tomcat进行了什么操作呢？</p><p><img src="https://p.ipic.vip/kpnux3.png" alt="image-20230420221207295"></p><p>一不做二不休，我们再进入到<code>TomcatWebServer</code>的这个构造方法中</p><p><img src="https://p.ipic.vip/emzr8q.png" alt="image-20230420221356900"></p><p>看来，我们来到了最后的这个tomcat的初始化了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> WebServerException &#123;<br>logger.info(<span class="hljs-string">&quot;Tomcat initialized with port(s): &quot;</span> + getPortsDescription(<span class="hljs-literal">false</span>));<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.monitor) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>addInstanceIdToEngineName();<br><br><span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> findContext();<br>context.addLifecycleListener((event) -&gt; &#123;<br><span class="hljs-keyword">if</span> (context.equals(event.getSource()) &amp;&amp; Lifecycle.START_EVENT.equals(event.getType())) &#123;<br><span class="hljs-comment">// Remove service connectors so that protocol binding doesn&#x27;t</span><br><span class="hljs-comment">// happen when the service is started.</span><br>removeServiceConnectors();<br>&#125;<br>&#125;);<br><br><span class="hljs-comment">// Start the server to trigger initialization listeners 启动tomcat！</span><br><span class="hljs-built_in">this</span>.tomcat.start();<br><br><span class="hljs-comment">// We can re-throw failure exception directly in the main thread</span><br>rethrowDeferredStartupExceptions();<br><br><span class="hljs-keyword">try</span> &#123;<br>ContextBindings.bindClassLoader(context, context.getNamingToken(), getClass().getClassLoader());<br>&#125;<br><span class="hljs-keyword">catch</span> (NamingException ex) &#123;<br><span class="hljs-comment">// Naming is not enabled. Continue</span><br>&#125;<br><br><span class="hljs-comment">// Unlike Jetty, all Tomcat threads are daemon threads. We create a</span><br><span class="hljs-comment">// blocking non-daemon to stop immediate shutdown</span><br>startDaemonAwaitThread();<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>stopSilently();<br>destroySilently();<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebServerException</span>(<span class="hljs-string">&quot;Unable to start embedded Tomcat&quot;</span>, ex);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，我们已经知道了<code>springboot</code>通过<code>tomcat</code>启动项目的流程了！</p><p>那回到我们的文章题目<code>Springboot可以同时处理多少个请求呢？</code>，实际上，它问的并不是springboot本身，而是承载这个web服务的tomcat容器！</p><h3 id="Tomcat的关键配置"><a href="#Tomcat的关键配置" class="headerlink" title="Tomcat的关键配置"></a>Tomcat的关键配置</h3><blockquote><p>本文以tomcat容器启动来提供一个分析这个题目的思路，解释但不局限！</p></blockquote><p>每一次HTTP请求到达Web服务，tomcat都会创建一个线程来处理该请求，那么最大线程数决定了Web服务容器可以同时处理多少个请求。</p><p>我们回到工程本身，打开配置文件去检索，我们可以看到springboot默认内置<code>tomcat</code>的最大线程数是<code>200</code>。</p><p><img src="https://p.ipic.vip/rejrys.png" alt="image-20230420222240001"></p><p>其次，当调用HTTP请求数达到tomcat的最大线程数时，还有新的HTTP请求到来，这时tomcat会将该请求放在等待队列中，这个<code>acceptCount</code>就是指能够接受的最大等待数，默认是<code>100</code>，如果等待队列也被放满了，这个时候再来新的请求就会被tomcat拒绝（<strong>connection refused</strong>）。</p><p><img src="https://p.ipic.vip/3fir79.png" alt="image-20230420222541848"></p><p>最后，我们来看一个参数，就是最大连接数（在同一时间，tomcat能够接受的最大连接数），这个值默认是<code>8192</code>。如果设置为-1，则禁用<code>maxconnections</code>功能，表示不限制tomcat容器的连接数。 maxConnections和accept-count的关系为：当连接数达到最大值<code>maxConnections</code>后，系统会继续接收连接，但不会超过acceptCount的值。</p><p><img src="https://p.ipic.vip/2mkq1n.png" alt="image-20230420222752353"></p><p>这大概我们需要关注这个问题的时候，需要第一时间想到的几个关键配置。</p><p>而对于默认值，我们是不是可以改大点来提升并发量，答案毋庸置疑是可以的，但是这个操作是需要根据硬件条件和业务需求来进行增加的，同时需要考虑的是<strong>增加线程是有成本的</strong>，更多的线程，不仅仅会带来更多的线程上下文切换成本，而且意味着带来更多的内存消耗。JVM中默认情况下在创建新线程时会分配大小为<code>1M</code>的线程栈，所以，更多的线程意味着需要更多的内存。</p><p>综合考虑，才能将性能提高到极限！</p><hr><p>本篇文章就讲到这里，希望对你们能有所启发，谢谢～</p>]]></content>
    
    
    <summary type="html">看到这个问题的时候，我陷入了沉思</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Springboot" scheme="https://gcoder5.com/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>智能风控平台学习笔记</title>
    <link href="https://gcoder5.com/2023/04/01/%E6%99%BA%E8%83%BD%E9%A3%8E%E6%8E%A7%E5%B9%B3%E5%8F%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://gcoder5.com/2023/04/01/%E6%99%BA%E8%83%BD%E9%A3%8E%E6%8E%A7%E5%B9%B3%E5%8F%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-04-01T07:38:30.000Z</published>
    <updated>2023-04-01T07:41:16.043Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究技术之余，学习了一下金融业务，以下就对风控这一块的学习笔记跟大家共享一下～</p><h3 id="一、认识智能风控"><a href="#一、认识智能风控" class="headerlink" title="一、认识智能风控"></a>一、认识智能风控</h3><h4 id="认识风控"><a href="#认识风控" class="headerlink" title="认识风控"></a>认识风控</h4><ul><li>风控是什么？风控的全称就是风险控制。</li></ul><h4 id="认识风险"><a href="#认识风险" class="headerlink" title="认识风险"></a>认识风险</h4><blockquote><p>那风险又怎么理解呢?</p></blockquote><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>风险就是指<strong>未来结果</strong>的<strong>不确定性</strong>或<strong>损失</strong>。</p><h5 id="具体表现"><a href="#具体表现" class="headerlink" title="具体表现"></a>具体表现</h5><ol><li><p>狭义风险</p><p>主要表现为风险的不确定性，说明风险<strong>只能表现出损失</strong>，<strong>没有从风险中获利的可能</strong>。也就是说利润为负（收入-成本&#x3D;利润）。</p></li><li><p>广义风险</p><p>主要表现为成本或者代价的不确定性，最终的风险结果会出现<span style="color:red"><strong>损失</strong></span>、<span style="color:red"><strong>盈利</strong></span>和<span style="color:red"><strong>盈亏平衡</strong></span>三种可能。也就是说成本、收入不可确定，最终导致利润也不可确定。</p></li></ol><h4 id="回归风控"><a href="#回归风控" class="headerlink" title="回归风控"></a>回归风控</h4><p>既然存在风险，那么风控指的就是风险管理者采用各种措施和方法，减少或者消灭风险事件发生的各种可能性，<strong>减少</strong>风险事件发生时造成的<strong>损失</strong>。<span style="color:green"><strong>风险控制实际上是风险管理的一个流程！</strong></span></p><p>所以说有效的风控，是为了减少风险造成的损失，达到最大化的利润输出！</p><h4 id="经典的风控模型-领结图"><a href="#经典的风控模型-领结图" class="headerlink" title="经典的风控模型-领结图"></a>经典的风控模型-领结图</h4><h5 id="故事分析"><a href="#故事分析" class="headerlink" title="故事分析"></a>故事分析</h5><p>从一个小故事来理解领结图</p><blockquote><p>在一个夜黑风高的晚上，铁轨上有一辆疾驰的火车，突然一块岩石滚落到铁轨上。因为流感盛行，好多司机请假，在缺少人手的情况下，列车司机已经连续工作11小时，非常疲倦。加之有一个火车头灯坏了，所以司机没有注意到那块岩石。接着火车撞上岩石脱轨了，车上不少乘客受了重伤，火车也损坏严重。事发路段铁路路堤很陡，所以在火车滚下路堤时，乘客伤亡情况加剧。</p><p>此次事故经由媒体报导，使得铁路公司声誉受损，且受到了行政处罚。许多乘客通过诉讼获得了赔偿。</p><p>在接下来的6个月里，铁路公司的乘客数量急剧下降。</p></blockquote><p>这个故事由三个部分组成：<strong>原因</strong>、<strong>事件</strong>以及<strong>后果</strong>，我们可以用多米诺骨牌进行可视化表示</p><p><img src="https://p.ipic.vip/e5zhn5.png" alt="image-20230326091114103"></p><p>第一块多米诺骨牌倒下是原因，中间的多米诺接连倒下就是事件。最终导致最后一块多米诺骨牌倒下即后果。</p><p>我们通过这个三个要素对故事进行分析，可以得到如下的流程图：</p><p><img src="https://p.ipic.vip/33nmpc.jpg" alt="img"></p><p>这就是领结图了。</p><h5 id="如何构建领结图"><a href="#如何构建领结图" class="headerlink" title="如何构建领结图"></a>如何构建领结图</h5><ol><li><p>识别主要事件</p><p>主要事件是什么取决于用领结图进行分析的人怎么想。主要事件通常为事故发生时你最先注意到的事情。故事中火车脱轨是最先被注意到的事，它即是主要事件。</p></li><li><p>往左扩展</p><p>确定主要事件以后用“为什么”来提问，在问题答案为“就是这个原因”，或原因不受控制(如自然界因素)时提问结束。例子中岩石滚落山崖是不受人为控制的。你能通过安全防护装置保护自己免受伤害，但是不能阻止岩石滚落山崖。</p></li><li><p>然后向右分析</p><p>问“然后呢？”以识别后果。当偏离风险评估的目标时结束。任何风险管理都需要明确目标。且应该在用领结图进行分析前就确立好目标。因为目标不确定好，就会无止境分析下去。领结图最右边即是风险后果。回顾前面的故事，铁路公司可能会把维护声誉、盈利能力、乘客安全作为他们的目标。所以其中任意一条都可以作为火车脱轨的后果。</p></li><li><p>得到领结图</p><p>到目前分析为止所得的领结图是固有风险领结图，还未考虑控制措施的影响。</p></li><li><p>优化领结图</p><p>增加控制措施的领结图分析，以寻找关键控制措施。例如：</p><ul><li>车头灯故障可以通过维修检查来规避；</li><li>火车受损可以通过保险来减少损失</li><li>等等</li></ul></li></ol><h5 id="规避构建常犯错误"><a href="#规避构建常犯错误" class="headerlink" title="规避构建常犯错误"></a>规避构建常犯错误</h5><ol><li>问“为什么”太少了，过早结束，错失了分析出风险的根本原因。设计控制措施时需要找到根本原因，所以建议大家像孩子一样一直问“为什么”。</li><li>中间事件遗失。像量子跃迁一样，中间事件跨度太大。要确保中间事件完整，整个事件分析连贯无跳跃。</li><li>把控制措施薄弱环节当做事件原因。如果在做领结图分析时将缺少培训当做原因，那就错了。真正的原因是人因失误。培训是控制措施的一种。</li></ol><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ol><li>领结图是风险管理的中心。任何事件都可以用领结图分析。</li><li>领结图可用于事故管理及分析、构建事故场景、合规分析、可视化等。</li><li>领结图还能分析潜在风险。</li></ol><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ol><li>该方法用可视化的形式解释了风险原因、事件及后果间的关系，同时能分析出降低风险的控制措施；</li><li>使得问题简化。能使高级管理层、工程师、操作工、行政管理者等各个层级的人都能轻易理解，有利于风险沟通；</li><li>既能分析过去发生的事故，又能分析出未来可能出现的风险；</li><li>能更直观展现可能性及严重性，可通过与其它方法结合应用于复杂场合；</li><li>能识别出降低风险所需资源；</li><li>能降低危险分析的时间，能减少在非必须屏障上的投入；</li><li>能将当前控制措施或额外需增加的控制措施进行分级，并识别关键控制措施；</li><li>评估控制措施的有效性；</li><li>能考虑到风险管理的方方面面；</li><li>能识别出其他风险评估方法漏分析的问题。</li></ol><h5 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h5><ol><li>很耗费时间</li><li>止步于定性分析</li><li>当多种危险源同时出现，很难从共因失效的角度分析其危险性；</li><li>使得复杂场景过于简化，不利于定量分析；</li><li>如果目标是分析不同控制措施间的复杂关系，需要借用其他风险评估方法。</li></ol><h4 id="常见的风险管理流程"><a href="#常见的风险管理流程" class="headerlink" title="常见的风险管理流程"></a>常见的风险管理流程</h4><h5 id="第一步-风险识别"><a href="#第一步-风险识别" class="headerlink" title="第一步.风险识别"></a>第一步.风险识别</h5><p>风险识别，是指风险管理的第一步，也是风险管理的基础。</p><p>风险识别是指在风险事故发生之前，人们运用各种方法系统地、连续地认识所面临的各种风险以及分析风险事故发生的潜在原因。风险识别过程包含<strong>感知风险</strong>和<strong>分析风险</strong>两个环节。</p><ul><li>感知风险：即了解客观存在的各种风险，是风险识别的基础，只有通过感知风险，才能进一步在此基础上进行分析，寻找导致风险事故发生的条件因素，为拟定风险处理方案，进行风险管理决策服务。</li><li>分析风险：即分析引起风险事故的各种因素，它是风险识别的关键。</li></ul><p>简言之，识别风险就是对风险进行收集，需要明确风险的类型，风险在什么时候、什么地点发生，风险发生的机制，风险发生的条件等要素。</p><h5 id="第二步-风险分析"><a href="#第二步-风险分析" class="headerlink" title="第二步.风险分析"></a>第二步.风险分析</h5><p>通过分析风险因素并记录潜在后果，确定出现新风险的可能性。</p><p>风险分析方法主要包括定性分析和定量分析</p><ul><li>风险发生概率的分析</li><li>风险结果的分析</li></ul><p>通过结合风险结果影响和风险发生概率，可以构建出风险等级矩阵，用于风险的评估。 </p><h5 id="第三步-风险决策"><a href="#第三步-风险决策" class="headerlink" title="第三步.风险决策"></a>第三步.风险决策</h5><p>风险决策指的是在识别风险和分析风险之后，制定相关的预防和缓解方案，发起风险降低行为。这是风险控制的关键。</p><h5 id="第四步-风险监控"><a href="#第四步-风险监控" class="headerlink" title="第四步.风险监控"></a>第四步.风险监控</h5><p>需要持续监控风险和指标，确保风险缓解计划正在发挥作用，或者及时发现风险愈演愈烈。从而对风险决策的能效和结果进行回溯，提炼能够评估风险决策稳定性和作用质量的指标。</p><h5 id="第五步-风控优化"><a href="#第五步-风控优化" class="headerlink" title="第五步.风控优化"></a>第五步.风控优化</h5><p>风控优化的前提是成熟的风险控制之下，通过风险决策的效果反馈，不断迭代优化，调整风控解决方案。</p><h4 id="常见的风控模型"><a href="#常见的风控模型" class="headerlink" title="常见的风控模型"></a>常见的风控模型</h4><blockquote><p>一般来说金融信贷中的风险主要集中于信用风险及欺诈风险</p></blockquote><h5 id="贷前阶段"><a href="#贷前阶段" class="headerlink" title="贷前阶段"></a>贷前阶段</h5><blockquote><p>这一阶段的数据来源主要分为<strong>申请信息</strong>、<strong>历史消费信息</strong>、<strong>外部信息</strong>（例如多投借贷、公积金等）</p><p>贷前风控是整个信贷流程的基础，直接影响信贷业务质量。信贷风控旨在解决信息不对称，首先体现在贷前的信息收集和数据整合过程。所以收集和整合的数据信息越准确、越充分，越有利于信贷审核以及做出正确决策。智能化手段通过线上线下结合，将非结构化数据建立联系，利用机器代替人工，消除主观判断带来的二次风险，实现自动化的同时降低成本、提高效率。</p><p>贷前风险控主要包括注册审核、身份验证、反欺诈、征信和授信五大环节。</p></blockquote><ol><li><p>用户响应风控模型</p><p>针对互联网，数据来源多样性，类似漏斗模式，分析获客阶段的用户转化情况，如：引流、导流、注册成功等信息，以及在某个阶段进行埋点分析流失状态。</p></li><li><p>申请评分卡风控模型</p><p>即A卡，主要侧重贷前风控，在客户获取初期，建立申请评分卡模型，预测未来客户在放款后逾期和违约的概率。</p></li><li><p>申请反欺诈风控模型</p><p>识别欺诈风险高的客户，捕捉各类欺诈行为，如身份造假，非客户本人的行为等。一般分为第一方反欺诈和第三方反欺诈。</p></li><li><p>风险定价风控模型</p><p>根据客户的历史情况分析，应该制定多少初始额度和初始利率比较合适。</p></li><li><p>用户价值风控模型</p><p>在风险评分难以决策的灰分区域，制定置入置出策略，预测客户在开户后能够为机构带来潜在收益。在相同风险等级客户里，可以筛选收益等级高的客户，最大化挖掘其收益潜力。</p></li></ol><h5 id="贷中阶段"><a href="#贷中阶段" class="headerlink" title="贷中阶段"></a>贷中阶段</h5><blockquote><p>和贷前阶段不同，这个阶段用户已经有过至少一次的还款行为，所以在数据维度会加入借贷数据，进入到贷中客户管理阶段</p><p>贷中风险管理能够实现对在线交易进行仿冒和欺诈识别，对借款人进行实时管控，有效防范和控制欺诈交易等贷中风险威胁。</p><p>实时监控的依据来源于实时监测的渠道数据，由于互联网数据具有更新周期短，反馈及时等特点，因此大数据接入可以协助借贷方实现动态监控、异常行为预警（多头借贷行为监控、还款能力指标异常预警及还款意愿交叉识别）等风险管理流程。</p><p>贷中风险控制主要包括信用评分、风险定价、审批、交易监控和交易反欺诈五大环节。</p></blockquote><ol><li><p>行为评分风控模型</p><p>也就是我们常说的B卡，通过分析不断去挖掘客户的各种需求，去推荐一些差异化的信贷产品，主要是给我们的客户交叉销售产品和提额。</p></li><li><p>交易反欺诈风控模型</p><p>交易阶段，识别一些羊毛党刷单、薅羊毛和套现行为。</p></li><li><p>客户流失风控模型</p><p>对客户流失的原因进行分析，提前知道哪些客户会流失，及时采取挽回措施。</p></li></ol><h5 id="贷后阶段"><a href="#贷后阶段" class="headerlink" title="贷后阶段"></a>贷后阶段</h5><blockquote><p>经过上面两个阶段，还有一小部分用户会逾期进入催收阶段</p><p>作为信贷管理的最终环节，确保贷款安全，案件防控和业务管理质量往往取决于贷后风控的精细化管理。针对有逾期征兆或者行为的客户进行管理、识别和催收，以往的贷后风控措施依赖于人工操作，成本高回报小，因此很多信贷机构在贷后布局投入较小。</p><p>贷后风险控制主要包括贷后监控、存量客户管理和催收三大环节。</p></blockquote><ol><li><p>催收预警风控模型</p><p>预测出一些轻度逾期的客户，这类客户可能只是单纯的忘记还款而已，这个时候就不需太多人工催收参与进来，先进行短信提醒等简单的催收工作即可。</p></li><li><p>还款率预测风控模型</p><p>预测经过催收之后，最终收回的欠款比率。</p></li><li><p>迁徙率模型</p><p>评估客户短期内会不会违约，可以预测逾期的人群从轻度逾期发展到重度逾期的概率。</p></li><li><p>失联修复风控模型</p><p>逾期阶段，客户本身联系不上，通过数据库挖掘新的联系方式（如，身边的亲戚朋友等），修复客户失联状态。</p></li></ol><h4 id="大数据风控"><a href="#大数据风控" class="headerlink" title="大数据风控"></a>大数据风控</h4><p>大数据风控即大数据风险控制，是指利用大数据构建模型的方法对风控目标进行风险的控制和提示。</p><h5 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h5><ol><li><p>数据量大</p><p>大数据是支撑大数据风控的基础。根据IDC预测，2025年全球数据总量将达到175ZB。</p></li><li><p>数据维度丰富</p><p>传统风控只利用传统金融数据，大数据风控还大量利用网络行为数据，如登录设备、登录地点，网络活动等数据。网络数据有助于更全面地进行用户画像和风险评估。在传统风控模式下无法评估的群体，如不能开具收入证明、没有信用卡、没有房产的群体，都会有网络交易与活动数据。</p><p>大数据通常还分成结构化数据（例如关系模型数据等）、半结构化数据（例如xml、json等文档数据）、非结构化数据（例如word文件、图片、视频等）三种类型。</p></li><li><p>风控客观</p><p>大数据风控不仅包含传统风控的经验判断，还包含非传统风控的数据分析和决策。</p><p>大数据风控基于算法，模型和规则，更加客观公正。</p></li><li><p>效率高</p><p>使用预制的风控模型对采集的数据进行实时风险评级，实现秒级的风控结果输出、对风险的毫秒级处理。</p><p>学习速度快，准确性更高。</p></li><li><p>适用范围广</p><p>传统风控受限其垂直领域的数据，但大数据风控在数据缺失时，可以通过对客户的其他数据（如消费数据、行为数据等）进行风险的定量和定性分析，最终输出风控评级，所以适用范围更广。</p></li></ol><h5 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h5><ol><li><p>数据不足</p><p>政务等外部数据保存在不同地方，联通性不足，导致信息孤岛。</p></li><li><p>易收到隐蔽化、团伙化的攻击</p><p>大数据风控的数据来源和运营都在线上，易遭受网络高攻击。</p></li><li><p>当前发展现状不容乐观</p><p>大数据风控的建设在前期需要大量投资，固定成本较高。随着业务规模的增加，每笔交易的边际成本才会逐渐接近为零，这需要有实力的大数据技术公司与金融机构对大数据风控的高度重视和持续大量投入。</p></li><li><p>大数据风控看重统计学上的相关性，需要不断完善模型</p></li></ol><h4 id="智能风控"><a href="#智能风控" class="headerlink" title="智能风控"></a>智能风控</h4><p>智能风控是指大数据风控的基础上，通过强化算法、算力等人工智能技术对风险进行深度挖掘，实现全链路风险控制的自动化、高效、准确。</p><p>智能风控的核心是人工智能和大数据。</p><h4 id="风控的目标"><a href="#风控的目标" class="headerlink" title="风控的目标"></a>风控的目标</h4><p>风险控制是风险管理的一个流程，也是一种方法。</p><p>风控的目标并不是完全规避风险，而是<strong>在风险和收益之间寻求一个平衡点</strong>。 公司只有业务做起来，风险基数足够大，才能有足够的能力承担坏账损失，获得足够的利润。 风控指标控制的再好，坏账率为０，只要业务起不来，也是对公司发展无益处。2</p><p>风控目标实际应拆解成三部分：控风险（现金贷企业的核心）、稳增长（现金贷企业的目的）、保平衡（保持风险和市场的平衡）。</p><h4 id="风险的管理"><a href="#风险的管理" class="headerlink" title="风险的管理"></a>风险的管理</h4><p>风险管理指的是企业、个人或者组织将未来发生风险的概率和发生风险后造成的损失通过风险控制降至最低的管理过程。</p><p>在讲述金融风险的管理之前，要先了解什么是金融以及什么是金融风险，以及什么是金融风险管理。</p><ol><li><p>什么是金融</p><p>金融是货币资金融通的总称，是以货币本身为经营标的、通过货币融通使货币增值的经济活动，主要指与货币流通和银行信用相关的各种活动</p></li><li><p>什么是金融风险</p><p>金融风险是指金融活动中产生的风险，如市场风险、信用风险、法律法规风险、流动性风险等</p></li><li><p>什么是金融风险管理</p><p>金融风险管理指金融风险的控制过程，包括金融风险的识别、分析、评估、决策等。金融风险管理的目的不仅是降低风险，还包括风险控制下的利益最大化</p></li></ol><h4 id="金融风险管理模型"><a href="#金融风险管理模型" class="headerlink" title="金融风险管理模型"></a>金融风险管理模型</h4><p>用一句话概括银行风险管理模型，什么人（三道防线，即组织和角色）基于什么工具（七大系统，即工具）通过什么方法（五大体系，即风控方法和流程）控制了什么风险（八大风险，即风险类型）</p><h5 id="三道防线"><a href="#三道防线" class="headerlink" title="三道防线"></a>三道防线</h5><p>三道防线指的是根据组织和角色划分关联的银行核心部分，分别是业务部分、风管部分、合规部分、审计部门、监察部门。</p><ol><li>第一道防线是业务部门，是风险管理的第一责任部门。在客户申请贷款时，根据客户的信息进行客观公正的尽职调查。</li><li>第二道防线是风险管理部门和合规部门，负责业务后端信用风险审核、合规风险控制，是机构的第二道风险控制防线，也是机构的最重要风控防线。最终控制不良客户的通过。</li><li>第三道防线是审计部门和监察部门，负责机构内部的风险控制。银行内控部门对于信贷业务办理流程标准化、资料标准化的监察就是第三道防线。</li></ol><h5 id="七大系统"><a href="#七大系统" class="headerlink" title="七大系统"></a>七大系统</h5><p>这指的是与银行信贷业务关联的七大核心系统。</p><ol><li><p>信贷业务系统</p><p>支撑信贷业务的开展，是根据银行业务流程和特征建立的全流程的业务循环系统，负责的是信贷业务的非账务管理系统。例如贷款产品的设计、上架、到信贷业务的营销获客、贷前审批、贷中放款、贷后管理等全业务生命周期的系统支持，同时包括全业务周期的风险管理支持。</p></li><li><p>信贷核心系统</p><p>信贷业务的基础，负责的是信贷业务的全周期账务管理功能，例如贷款业务的放款、计息、还息、还本、支付等功能。</p></li><li><p>内控系统</p><p>负责银行内部风险的防范和处理，主要是对银行内部风险管理准则实施过程中的内部风险进行控制，是全银行的审计和合规监察。如信贷业务重大风险、合规风险等风险的主动预防、拦截。</p></li><li><p>报表系统</p><p>负责银行运营数据的可视化呈现，为银行的经营方向提供数据决策建议。如财务报表、资产质量报表等。</p></li><li><p>风控平台</p><p>负责信贷风险的控制，通过对信贷业务风险的识别、分析、拦截实现对信贷风险的管控。</p></li><li><p>基础管理系统</p><p>负责银行的基础管理工作，为银行的业务顺利开展保驾护航，如员工的角色权限、考勤制度、绩效考核等。</p></li><li><p>数据平台</p><p>负责对各系统提供数据支撑和管理，对数据的收集、存储和使用进行有序化处理，如对客户从申请到放款以及后续还款的借贷数据进行管理。</p></li></ol><h5 id="五大体系"><a href="#五大体系" class="headerlink" title="五大体系"></a>五大体系</h5><p>作为风险管理的核心，风险控制是风险管理的基础流程，主要分为风险识别、风险分析、风险决策、风险监控、风险迭代五部分。</p><p>全生命周期的信贷业务流程分成贷前、贷中、贷后三部分。</p><p>贷前包括客户申请贷款、银行征信审核、银行额度&#x2F;利率确认；贷中包括贷款发放、客户还款；贷后包括逾期催收、风险预警等。</p><h5 id="八大风险"><a href="#八大风险" class="headerlink" title="八大风险"></a>八大风险</h5><p>银行经营八大风险是：信用风险、市场风险、操作风险、法律风险、国家风险、流动性风险、声誉风险、战略风险。</p><ol><li><p><strong>信用风险</strong>是指交易对手未能履行约定契约中的义务而造成经济损失的风险，它是金融风险的主要类型。</p></li><li><p><strong>市场风险</strong>是指由于基础资产市场价格的不利变动或者急剧波动而导致衍生工具价格或者价值变动的风险。</p></li><li><p><strong>操作风险</strong>是指由于客户、设计不当的控制体系、控制系统失灵及不可控事件导致的各类风险。</p></li><li><p><strong>法律风险</strong>：因为无法满足或违反法律要求，导致商业银行不能履行合同发生争议&#x2F;诉讼或其他法律纠纷，而可能给商业银行造成经济损失的风险。</p></li><li><p><strong>国家风险</strong>指在国际经济活动中，由于国家的主权行为所引起的造成损失的可能性。</p></li><li><p><strong>流动性风险</strong>指商业银行虽然有清偿能力，但无法及时获得充足资金或无法以合理成本及时获得充足资金以应对资产增长或支付到期债务的风险。</p></li><li><p><strong>声誉风险</strong>是指由商业银行经营、管理及其他行为或外部事件导致利益相关方对商业银行负面评价的风险。</p></li><li><p><strong>战略风险</strong>概念风险的基本定义是损失的不确定性，战略风险就可理解为企业整体损失的不确定性。</p></li></ol><h3 id="二、智能风控进化史"><a href="#二、智能风控进化史" class="headerlink" title="二、智能风控进化史"></a>二、智能风控进化史</h3><h4 id="智能风控1-0"><a href="#智能风控1-0" class="headerlink" title="智能风控1.0"></a>智能风控1.0</h4><p>智能风控1.0是指线下人工风控到自动化风控的进化过程。</p><h5 id="风控业务"><a href="#风控业务" class="headerlink" title="风控业务"></a>风控业务</h5><p>1.0从银行风控业务从传统的信贷业务起步，通过流水化管理信贷业务，使得信贷风控业务较为标准化。</p><p>新的风险：电商刷单、账号盗用等</p><p>缺点：人工审核（耗时，效率低）</p><h5 id="风控数据"><a href="#风控数据" class="headerlink" title="风控数据"></a>风控数据</h5><p>1.0的传统风控数据主要是信息维度单一的孤岛数据，数据获取方式主要是人工收集。</p><h5 id="风控系统"><a href="#风控系统" class="headerlink" title="风控系统"></a>风控系统</h5><p>1.0的银行风控系统，严格来说不能被称为智能风控系统，顶多就是一个信贷业务审核系统。</p><p>1.0的风控系统才最开始简单的手动规则计算器到后来半自动化的规则引擎，再到手动贷后风险预警规则引擎。</p><h4 id="智能风控2-0"><a href="#智能风控2-0" class="headerlink" title="智能风控2.0"></a>智能风控2.0</h4><p>互联网推动数字信息裂变式增长，大数据概念被推出，基于大数据的智能风控2.0的风控业务、风控数据、风控系统雏形初现。</p><h5 id="风控业务-1"><a href="#风控业务-1" class="headerlink" title="风控业务"></a>风控业务</h5><p>2.0的风控业务，从传统的风控业务升级成线上风控业务，此时银行的风控业务随线上业务的拓展逐步发展并向欺诈风控转变，互联网市场互金、电商、支付的风基本风控业务已步入生长期。</p><p>新的风险：电商刷单、营销活动薅羊毛、支付账号盗用、互金信贷欺诈等</p><h5 id="风控数据-1"><a href="#风控数据-1" class="headerlink" title="风控数据"></a>风控数据</h5><p>2.0的风控数据数据来源更加丰富；风控数据时效性更强；风控数据易变性更高。</p><h5 id="风控系统-1"><a href="#风控系统-1" class="headerlink" title="风控系统"></a>风控系统</h5><p>1.0的风控系统是简单的规则引擎，是一个简单的产品，具有高耦合性，不能灵活地适用于不同业务以及同一业务中不同风控业务节点。2.0的风控系统是实现大数据风控方案的产品化。</p><p>1.0的风控系统主要是为了解决自由业务的风险控制；而2.0的风控系统不仅可以满足自由业务的风险控制要求，而且具备支撑金融科技对外输出的能力。</p><p>2.0的风控系统出了能够实现简单规则配置，还能够实现规则集、规则树、规则表以及评分卡等类型的风控策略配置。</p><p>2.0的风控系统已经有单独的指标管理系统和风控报告。</p><h4 id="智能风控3-0"><a href="#智能风控3-0" class="headerlink" title="智能风控3.0"></a>智能风控3.0</h4><p>3.0版本是大数据风控到人工智能风控的转变，从最初的运用大数据技术发展成深度融合大数据技术和人工智能技术。（OCR、自然语言处理、流计算，生物探针等）</p><h5 id="风控业务-2"><a href="#风控业务-2" class="headerlink" title="风控业务"></a>风控业务</h5><p>3.0的风控业务核心是反欺诈。（营销欺诈、刷单欺诈、流量欺诈、交易欺诈、信贷欺诈、套现欺诈、信用欺诈、电信欺诈、信息盗取欺诈）</p><h5 id="风控数据-2"><a href="#风控数据-2" class="headerlink" title="风控数据"></a>风控数据</h5><p>3.0的风控数据主要是基于2.0版本的大数据利用先进的算法以及技术进行深度挖掘创造出来的衍生数据。</p><ol><li>运用自然语言处理、OCR等技术从非结构化数据和半结构化数据中提取风控数据（例如利用OCR技术识别的结构化发票数据、身份数据、营业执照数据等；利用自然语言处理技术提取的结构化司法数据、失信数据等）</li><li>运用机器学习、人工智能、神经网络等技术挖掘、分析、创造的风控数据（例如在电商、金融中常用到的画像数据）</li></ol><h5 id="风控系统-2"><a href="#风控系统-2" class="headerlink" title="风控系统"></a>风控系统</h5><p>2.0版本的风控系统是专业、易用、灵活的智能风控平台，但是应对变化多端的欺诈类型时就显得比较无力。而3.0版本应运而生。</p><p>3.0的风控系统功能更加完善、更加智能；不仅能够应对常规风险，还能应对突发多变的欺诈风险。</p><table><thead><tr><th>功能模块</th><th>2.0</th><th>3.0</th></tr></thead><tbody><tr><td>数据平台</td><td>☑️</td><td>☑️</td></tr><tr><td>决策引擎</td><td>☑️</td><td>☑️</td></tr><tr><td>指标管理</td><td>☑️</td><td>☑️</td></tr><tr><td>接口管理</td><td>☑️</td><td>☑️</td></tr><tr><td>风控报告</td><td>☑️</td><td>☑️</td></tr><tr><td>模型监控</td><td>☑️</td><td>☑️</td></tr><tr><td>风控后台</td><td>☑️</td><td>☑️</td></tr><tr><td>可视化报表</td><td>-</td><td>☑️</td></tr><tr><td>数据挖掘</td><td>-</td><td>☑️</td></tr><tr><td>关系网络</td><td>-</td><td>☑️</td></tr></tbody></table><h3 id="风控与业务场景的契合"><a href="#风控与业务场景的契合" class="headerlink" title="风控与业务场景的契合"></a>风控与业务场景的契合</h3><blockquote><p>脱离业务场景，风控就只是一个工具，而且是没有生命的工具。</p></blockquote>]]></content>
    
    
    <summary type="html">技术和业务的结合，或许就是新的产品～</summary>
    
    
    
    <category term="业务" scheme="https://gcoder5.com/categories/%E4%B8%9A%E5%8A%A1/"/>
    
    
    <category term="风险" scheme="https://gcoder5.com/tags/%E9%A3%8E%E9%99%A9/"/>
    
  </entry>
  
  <entry>
    <title>用macbook搞虚拟机的那些事儿</title>
    <link href="https://gcoder5.com/2023/03/25/%E7%94%A8macbook%E6%90%9E%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <id>https://gcoder5.com/2023/03/25/%E7%94%A8macbook%E6%90%9E%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</id>
    <published>2023-03-25T00:41:14.000Z</published>
    <updated>2023-03-25T02:46:17.282Z</updated>
    
    <content type="html"><![CDATA[<p>今天闲来无事，用macbook的<code>Parallels Desktop</code>安装了一个<code>fedora37</code>的虚拟机，但是死活就是没办法宿主机和虚拟机之间进行黏贴复制，哎，这让人很惆怅，所以我就想着把fedora37的终端装上桌面算了，起码还能够在里面百度啥的，方便复制！</p><h3 id="把fedora的终端装上桌面"><a href="#把fedora的终端装上桌面" class="headerlink" title="把fedora的终端装上桌面"></a>把fedora的终端装上桌面</h3><h4 id="第一步-升级dnf"><a href="#第一步-升级dnf" class="headerlink" title="第一步 升级dnf"></a>第一步 升级<code>dnf</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sehll">dnf upgrade<br>dnf update<br></code></pre></td></tr></table></figure><h4 id="第二步-安装Cinnamon桌面环境"><a href="#第二步-安装Cinnamon桌面环境" class="headerlink" title="第二步 安装Cinnamon桌面环境"></a>第二步 安装<code>Cinnamon</code>桌面环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认情况下，Cinnamon 位于 Fedora 37 的默认存储库中。现在运行以下命令，将最新版本的 Cinnamon 安装到您的 Fedora 系统中</span><br>dnf group install &quot;Cinnamon Desktop&quot;<br></code></pre></td></tr></table></figure><h4 id="第三步-重启"><a href="#第三步-重启" class="headerlink" title="第三步 重启"></a>第三步 重启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure><h4 id="第四步-开启Cinnamon桌面"><a href="#第四步-开启Cinnamon桌面" class="headerlink" title="第四步 开启Cinnamon桌面"></a>第四步 开启<code>Cinnamon</code>桌面</h4><p>重启之后你会发现还是在终端页面，这时候可以用命令开启桌面模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl isolate graphical.target<br></code></pre></td></tr></table></figure><h4 id="第五步-设置开机启动桌面"><a href="#第五步-设置开机启动桌面" class="headerlink" title="第五步 设置开机启动桌面"></a>第五步 设置开机启动桌面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl set-default graphical.target<br>rm &#x27;/etc/systemd/system/default.target&#x27;<br>ln -s &#x27;/usr/lib/systemd/system/graphical.target&#x27; &#x27;/etc/systemd/system/default.target&#x27;<br></code></pre></td></tr></table></figure><h4 id="第六步-设置用startx命令启动"><a href="#第六步-设置用startx命令启动" class="headerlink" title="第六步 设置用startx命令启动"></a>第六步 设置用<code>startx</code>命令启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;systemctl isolate graphical.target&quot; &gt;&gt; ~/.xinitrc<br><br>startx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">多少是想榨干macbook的作用～</summary>
    
    
    
    <category term="杂谈" scheme="https://gcoder5.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="macbook" scheme="https://gcoder5.com/tags/macbook/"/>
    
    <category term="虚拟机" scheme="https://gcoder5.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于代码优化的技巧记录</title>
    <link href="https://gcoder5.com/2023/03/19/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E7%9A%84%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/"/>
    <id>https://gcoder5.com/2023/03/19/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E7%9A%84%E6%8A%80%E5%B7%A7%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-19T12:43:26.000Z</published>
    <updated>2023-03-24T05:49:13.130Z</updated>
    
    <content type="html"><![CDATA[<p>今天刚好收到微信推送有这么一篇文章《<a href="https://mp.weixin.qq.com/s/hstwb5mqTjbCHQr-pO4-jg">分享16个代码优化技巧</a>》，借着这个作者的分享，我也把里面的16个优化技巧给实操一遍，然后记录下来。当然，这16个并不是结束，只是一个开始，因为代码优化是一件非常持久的事情，不是零星几点就可以搞完的。</p><h3 id="类成员与方法的可见性最小化"><a href="#类成员与方法的可见性最小化" class="headerlink" title="类成员与方法的可见性最小化"></a>类成员与方法的可见性最小化</h3><blockquote><p><strong><a href="https://www.jianshu.com/p/2da2fa352f9b">参考文章</a>，仅供学习记录参考，如有侵权，请联系删除！</strong></p></blockquote><p>区分良好设计与不佳设计的最重要因素是，组件<strong>是否将其内部数据与实现细节隐藏起来</strong>。一个良好的设计应当隐藏所有的实现细节，将其API和实现清晰的分离开。然后组件<strong>只能通过API进行交流</strong>，而<strong>对彼此的实现细节一无所知</strong>。这就是所谓的信息隐藏或者封装，是软件设计的最基本原则。</p><p>信息隐藏非常重要，主要的原因是，它能够将组成一个系统的各个组件解耦开来，是<strong>各个组件能够独立进行开发、测试、优化、使用或者修改</strong>，这能够极大幅度提高软件开发的效率，因为各个组件能够同时进行开发。信息隐藏也<strong>减轻了维护的负担</strong>，因为组件能够被更快地理解和调试或者更换组件，而不用担心损害到其他组件。虽然信息隐藏<strong>不能直接创造良好的性能，但是它能进行有效的性能调整</strong>：一旦系统完成并且分析确定哪些组件导致了性能问题，就可能优化或者直接替换这些组件，而不用担心对其他组件造成影响。<span style="color:red"><strong>最后，信息隐藏能够降低构建大型系统的风险，因为即使系统不能正常工作，它的各个组件也可能被证明是成功可用的。</strong></span></p><p>Java提供了很多机制来帮助<strong>信息隐藏</strong>。访问控制机制指定了<strong>类、接口和成员的可见性</strong>，类和成员的可见性取决于其声明的位置，以及声明中的访问控制符（<code>private</code>,<code>protect</code>和<code>public</code>），正确使用这些操作符对<strong>信息隐藏</strong>至关重要。</p><p><span style="color:blue"><strong>大拇指规则（经验法则）很简单：尽量使类和成员对外界保持不可见性，也就是说能用<code>private</code>修饰的绝不使用<code>protect</code>或者<code>public</code>来修饰。</strong></span></p><p>对于顶层（非嵌套的）类和接口来说，只有两种可能的可访问级别：包级私有和<code>public</code>，你可以在声明类和接口的时候使用<code>public</code>修饰符，这样它们就是对所有类都可见的，否则是包级私有的。包级私有类通常作为实现的一部分，你可以修改、替换或者在后续版本中删掉它，而不必担心会对现有使用者造成影响，而<code>public</code>的类一旦声明了，你就有义务永远维护它，以保持兼容性，所以<strong>应该小心地设计一个<code>public</code>的类或者接口，因为一旦设计不好，后续的维护将会十分艰难。</strong></p><p>举个例子：如果是一个<code>private</code>的方法，想删除就删除。</p><p>如果一个<code>public</code>的<code>service</code>方法，或者一个<code>public</code>的成员变量，删除一下，不得思考很多。</p><h3 id="使用位移操作替代乘除法"><a href="#使用位移操作替代乘除法" class="headerlink" title="使用位移操作替代乘除法"></a>使用位移操作替代乘除法</h3><p>计算机是使用二进制表示的，位移操作会极大地提高性能。</p><blockquote><p>&lt;&lt; 左移相当于乘以 2；&gt;&gt; 右移相当于除以 2</p><p>&gt;&gt;&gt; 无符号右移相当于除以 2，但它会忽略符号位，空位都以 0 补齐</p></blockquote><p><strong>总结：左移代替乘法，右移代替除法。【左乘右除】;注意的是使用移位应添加注释，因为移位操作不直观，比较难理解。</strong></p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 乘法（乘号）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> a * <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> a * <span class="hljs-number">8</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 乘法（位移）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> a &lt;&lt; <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> a &lt;&lt; <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 除法（除号）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> a / <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> a / <span class="hljs-number">8</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 除法（位移）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> a &gt;&gt; <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> a &gt;&gt; <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="尽量减少对变量的重复计算"><a href="#尽量减少对变量的重复计算" class="headerlink" title="尽量减少对变量的重复计算"></a>尽量减少对变量的重复计算</h3><p>我们知道对方法的调用是有消耗的，包括创建栈帧、调用方法时保护现场，恢复现场等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反例</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>  System.out.println(<span class="hljs-string">&quot;result&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 正例</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, length = list.size(); i &lt; length; i++) &#123;<br>  System.out.println(<span class="hljs-string">&quot;result&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上的代码，当<code>list.size()</code>很大的时候，就可以减少很多的消耗。</p><h3 id="不要捕捉RuntimeException"><a href="#不要捕捉RuntimeException" class="headerlink" title="不要捕捉RuntimeException"></a>不要捕捉RuntimeException</h3><p>Java 类库中定义的一类 <code>RuntimeException</code> 可以通过预先检查进行规避，而不应该通过 <code>catch</code> 来处理，比如:<code> IndexOutOfBoundsException</code>，<code>NullPointerException</code>等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反例</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">(List&lt;String&gt; list, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> list.get(index);<br>    &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 正例</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test2</span><span class="hljs-params">(List&lt;String&gt; list, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= list.size() || index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list.get(index);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用局部变量可避免在堆上分配"><a href="#使用局部变量可避免在堆上分配" class="headerlink" title="使用局部变量可避免在堆上分配"></a>使用局部变量可避免在堆上分配</h3><p>首先，我们先来了解概念。根据内存管理(分配和回收)方式的不同，可以将内存分为<code>堆内存</code>和<code>栈内存</code>。那这两块内存有什么区别呢？</p><table><thead><tr><th>内存名称</th><th>作用</th></tr></thead><tbody><tr><td>堆内存</td><td>由内存分配器和垃圾收集器负责回收</td></tr><tr><td>栈内存</td><td>由编译器自动进行分配和释放</td></tr></tbody></table><p>一个程序的运行过程中，可能会有多个<code>栈内存</code>，但是肯定只有一个堆内存。</p><p>每个栈内存都是由线程或协程独立占有，因此从栈中分配内存不需要加锁，并且栈内存再函数结束后会自动回收，性能相对堆内存要高。</p><p>而堆内存可能同时有多个线程或者协程从堆中申请内存，因此堆中申请内存需要加锁，避免造成冲突。并且堆内存在函数结束后，需要GC的介入参与，如有大量的GC操作，将导致程序性能下降严重。</p><p>了解了内存管理之后，我们来了解下我们的局部变量是从哪里分配的。</p><p>正常思路而言，局部变量的作用域仅仅在它所在的函数中，当函数返回后，所有局部变量所占用的内存空间都会被收回。所以说如果局部变量是基本类型的，那么值会直接存在栈中，如果是引用类型的，则会将其对象存在堆中，而把对象的引用（指针）存在栈中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-comment">// 引用类型的局部变量</span><br>  <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  <span class="hljs-comment">// 基本类型的局部变量</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：由于堆资源是多线程共享的，是垃圾回收器工作的主要区域，过多的对象会造成 GC 压力，可以通过局部变量的方式，将变量在栈上分配。这种方式变量会随着方法执行的完毕而销毁，能够减轻 GC 的压力。</p><h3 id="减少变量的作用范围"><a href="#减少变量的作用范围" class="headerlink" title="减少变量的作用范围"></a>减少变量的作用范围</h3><p>注意变量的作用范围，尽量减少对象的创建。</p><p>如下面的代码，变量 s 每次进入方法都会创建，可以将它移动到 if 语句内部。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span><span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(str))&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> s*s;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尽量采用懒加载的策略，在需要的时候才创建"><a href="#尽量采用懒加载的策略，在需要的时候才创建" class="headerlink" title="尽量采用懒加载的策略，在需要的时候才创建"></a>尽量采用懒加载的策略，在需要的时候才创建</h3><p>懒加载的方式避免我们创建一些非必需的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反例</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;java&quot;</span>.equals(name))&#123;<br>  list.add(s);<br>&#125;<br><span class="hljs-comment">// 正例</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;java&quot;</span>.equals(name))&#123;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>  list.add(s);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="访问静态变量直接使用类名"><a href="#访问静态变量直接使用类名" class="headerlink" title="访问静态变量直接使用类名"></a>访问静态变量直接使用类名</h3><p>首先，我们先来想一下下面这段代码如果运行会发生什么事？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        System.out.println(test.a);<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>看着上面这段代码是不是感觉肯定有问题，会导致NPE，但实际上运行之后会输出<code>100</code>，为啥会出现这种奇怪的现象呢？一个null也可以访问到类变量呢？</p><p>我们通过JDK自带的反汇编器<code>javap</code>，可以查看java编译器为我们生成的字节码，用这个工具，我们可以对照源码和字节码，从而了解很多编译器内部的工作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac TestDemo.java<br>javap -c -verbose TestDemo<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">反汇编结果</span><br>&#123;<br>  public com.gcoder.test.TestDemo();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=1, locals=1, args_size=1<br>         0: aload_0<br>         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>         4: return<br>      LineNumberTable:<br>        line 18: 0<br><br>  public static void main(java.lang.String[]);<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=2, locals=2, args_size=1<br>         0: aconst_null<br>         1: astore_1<br>         2: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>         5: aload_1<br>         6: pop<br>         7: getstatic     #3                  // Field com/gcoder/test/Test.a:I<br>        10: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V<br>        13: return<br>      LineNumberTable:<br>        line 20: 0<br>        line 21: 2<br>        line 22: 13<br>&#125;<br>SourceFile: &quot;TestDemo.java&quot;<br></code></pre></td></tr></table></figure><p>通过字节码指令7我们可以看到，其实在编译过程中编译器已经将代码优化成类名点访问的形式了，而使用对象访问静态变量，这种方式多了一步<strong>寻址</strong>的动作，需要先找到变量对应的类，再找到类对应的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 反例</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> objectA.staticMethod();<br> <span class="hljs-comment">// 正例</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ClassA.staticMethod();<br></code></pre></td></tr></table></figure><h3 id="字符串拼接使用StringBuilder"><a href="#字符串拼接使用StringBuilder" class="headerlink" title="字符串拼接使用StringBuilder"></a>字符串拼接使用<code>StringBuilder</code></h3><p>首先我们先抛出结论：<strong>字符串拼接，使用 StringBuilder 或者 StringBuffer，不要使用 + 号。</strong></p><p>为什么我们说不要使用<code>+</code>号对字符串进行拼接呢？其实这得从字符串拼接的性能问题来说，当我们使用<code>+</code>拼接，都会生成一个新的String。特别在循环拼接字符串的场景下，性能损失是极其严重的：</p><ol><li>空间浪费：每次拼接的结果都需要创建新的不可变类</li><li>时间浪费：创建的新不可变类需要初始化；产生大量<code>短命</code>垃圾，影响年轻代甚至<code>full gc</code></li></ol><p>下面我们分两个场景来看看拼接的情况</p><ol><li><p>较为简单的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sentence</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;world&quot;</span> + i + <span class="hljs-string">&quot;\n&quot;</span>;<br>        System.out.println(sentence);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<code>javap</code>我们来看源码和字节码的对比情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">Compiled from &quot;TestDemo.java&quot;<br>public class com.gcoder.test.TestDemo &#123;<br>  public com.gcoder.test.TestDemo();<br>    Code:<br>       0: aload_0<br>       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>       4: return<br><br>  public static void main(java.lang.String[]);<br>    Code:<br>       0: iconst_0<br>       1: istore_1<br>       2: new           #2                  // class java/lang/StringBuilder<br>       5: dup<br>       6: invokespecial #3                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V<br>       9: ldc           #4                  // String Helloworld<br>      11: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;<br>      14: iload_1<br>      15: invokevirtual #6                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;<br>      18: ldc           #7                  // String \n<br>      20: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;<br>      23: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;<br>      26: astore_2<br>      27: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>      30: aload_2<br>      31: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>      34: return<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们可以看到编译器将我们的String的拼接操作优化成了<code>StringBuilder#append()</code>，由此我们可以看到编译器对我们代码进行的一些必要的优化，但是在一些较为复杂的场景中，这样的优化效果却并不明显！</p></li><li><p>较为复杂的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sentence</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) &#123;<br>            sentence += <span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;world&quot;</span> + i + <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>        System.out.println(sentence);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell">Compiled from &quot;TestDemo.java&quot;<br>public class com.gcoder.test.TestDemo &#123;<br>  public com.gcoder.test.TestDemo();<br>    Code:<br>       0: aload_0<br>       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>       4: return<br><br>  public static void main(java.lang.String[]);<br>    Code:<br>       0: iconst_0<br>       1: istore_1<br>       2: aconst_null<br>       3: astore_2<br>       4: iconst_0<br>       5: istore_1<br>       6: iload_1<br>       7: ldc           #2                  // int 1000000000<br>       9: if_icmpge     47<br>      12: new           #3                  // class java/lang/StringBuilder<br>      15: dup<br>      16: invokespecial #4                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V<br>      19: aload_2<br>      20: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;<br>      23: ldc           #6                  // String Helloworld<br>      25: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;<br>      28: iload_1<br>      29: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;<br>      32: ldc           #8                  // String \n<br>      34: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;<br>      37: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;<br>      40: astore_2<br>      41: iinc          1, 1<br>      44: goto          6<br>      47: getstatic     #10                 // Field java/lang/System.out:Ljava/io/PrintStream;<br>      50: aload_2<br>      51: invokevirtual #11                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>      54: return<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的代码我们也可以看到编译器同样会进行优化，但是因为这是在一个循环体中，每次循环都会new一个新的StringBuilder对象来使用，使用完就会销毁。对象的创建和销毁的开销虽然平时看不出来，可是一旦拼接次数多了的话，这个开销也是十分大的！因此在频繁的字符串变量拼接操作中，尽量自己显式创建StringBuilder而不要让jvm自己去优化。</p></li></ol><h3 id="重写对象的HashCode，不要简单地返回固定值"><a href="#重写对象的HashCode，不要简单地返回固定值" class="headerlink" title="重写对象的HashCode，不要简单地返回固定值"></a>重写对象的HashCode，不要简单地返回固定值</h3><p>有同学在开发重写 <code>HashCode </code>和<code>Equals</code>方法时，会把 <code>HashCode</code> 的值返回固定的 0，而这样做是不恰当的</p><p>当这些对象存入<code> HashMap</code> 时，性能就会非常低，因为 <code>HashMap</code> 是通过<code>HashCode</code>定位到 <code>Hash</code> 槽，有冲突的时候，才会使用<strong>链表</strong>或者<strong>红黑树</strong>组织节点，固定地返回 0，相当于把 Hash 寻址功能无效了。</p><h3 id="HashMap等集合初始化的时候，指定初始值大小"><a href="#HashMap等集合初始化的时候，指定初始值大小" class="headerlink" title="HashMap等集合初始化的时候，指定初始值大小"></a>HashMap等集合初始化的时候，指定初始值大小</h3><p>这样的对象有很多，比如 ArrayList，StringBuilder 等，通过指定初始值大小可减少扩容造成的性能损耗。下面我们也把java中各种集合的扩容知识进行记录</p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>初始容量定义：默认为<code>1 &lt;&lt; 4（16）</code>。最大容量为<code>1&lt;&lt; 30</code></p><p>扩容加载因子为<code>0.75</code>，第一个临界点在当HashMap中元素的数量大于table数组长度<em>加载因子（16</em>0.75&#x3D;12），则按<code>oldThr &lt;&lt; 1（原长度*2）</code>扩容。</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>初始容量定义：16。因为构造一个HashSet，其实相当于新建一个HashMap，然后取HashMap的Key</p><p>扩容机制和<code>HashMap</code>一样</p><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><p>初始容量定义：<code>capacity (11)</code></p><p>扩容加载因子<code>0.75</code>，当超出默认长度（int）（11*0.75）&#x3D;8时，扩容为<code>old*2+1</code>。（int newCapacity &#x3D; (oldCapacity &lt;&lt; 1) + 1;）</p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>初始容量定义：10</p><p>扩容：oldCapacity + (oldCapacity &gt;&gt; 1)，即原集合长度的1.5倍。（int newCapacity &#x3D; (oldCapacity * 3)&#x2F;2 + 1;）</p><h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><p>CopyOnWriteArrayList并不像ArrayList一样指定默认的初始容量。它也没有自动扩容的机制，而是添加几个元素，长度就相应的增长多少。CopyOnWriteArrayList适用于读多写少，既然是写的情况少，则不需要频繁扩容。并且修改操作每次在生成新的数组时就指定了新的容量，也就相当于扩容了，所以不需要额外的机制来实现扩容。</p><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>初始容量定义：<code>16</code></p><p>扩容：因为<code>StringBuffer extends AbstractStringBuilder</code>，所以实际上是用的是<code>AbstractStringBuilder</code><br>的扩容方法，当用<code>append(str)</code>添加字符串时，假设字符串中已有字符长度为count的字符串,初始长度value&#x3D;16,若要添加的<br>字符串长度（count+str.length()）&lt;&#x3D;(value<em>2+2)则按value<em>2+2长度扩容，并且value&#x3D;value</em>2+2，若（count+str.length()）&gt;(value</em>2+2)，则按count+str.length()长度扩容，并且value&#x3D;count+str.length()。下次超出时再按以上方法与value*2+2比较扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">newCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br><span class="hljs-comment">// overflow-conscious code</span><br><span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> (value.length &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>) &#123;<br>newCapacity = minCapacity;<br></code></pre></td></tr></table></figure><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>初始容量定义：<code>16</code></p><p>扩容机制和<code>StringBuffer</code>一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilder</span><br><span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractStringBuilder</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, CharSequence<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">StringBuilder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">super</span>(<span class="hljs-number">16</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">newCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br><span class="hljs-comment">// overflow-conscious code</span><br><span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> (value.length &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>) &#123;<br>newCapacity = minCapacity;<br></code></pre></td></tr></table></figure><h3 id="循环内不要不断创建对象引用"><a href="#循环内不要不断创建对象引用" class="headerlink" title="循环内不要不断创建对象引用"></a>循环内不要不断创建对象引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反例</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= size; i++) &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();    <br>&#125;<br><br><span class="hljs-comment">// 正例</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= size; i++) &#123;<br>    obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>第一种会导致内存中有size个Object对象引用存在，size很大的话，就耗费内存了。</p><h3 id="遍历Map-的时候，使用-EntrySet-方法"><a href="#遍历Map-的时候，使用-EntrySet-方法" class="headerlink" title="遍历Map 的时候，使用 EntrySet 方法"></a>遍历Map 的时候，使用 EntrySet 方法</h3><p>使用 EntrySet 方法，可以直接返回 set 对象，直接拿来用即可；而使用 KeySet 方法，获得的是key 的集合，需要再进行一次 get 操作，多了一个操作步骤，所以更推荐使用 EntrySet 方式遍历 Map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Map.Entry&lt;String, String&gt;&gt; entryseSet = nmap.entrySet();<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entryseSet) &#123;<br>    System.out.println(entry.getKey()+<span class="hljs-string">&quot;,&quot;</span>+entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不要在多线程下使用同一个-Random"><a href="#不要在多线程下使用同一个-Random" class="headerlink" title="不要在多线程下使用同一个 Random"></a>不要在多线程下使用同一个 Random</h3><p>Random 类的 seed 会在并发访问的情况下发生竞争，造成性能降低，建议在多线程环境下使用<code>ThreadLocalRandom</code>类。</p><p><img src="https://p.ipic.vip/y5847p.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ThreadLocalRandom</span> <span class="hljs-variable">threadLocalRandom</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>                System.out.println(<span class="hljs-string">&quot;Thread1:&quot;</span>+threadLocalRandom.nextInt(<span class="hljs-number">10</span>));<br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>                System.out.println(<span class="hljs-string">&quot;Thread2:&quot;</span>+threadLocalRandom.nextInt(<span class="hljs-number">10</span>));<br>            &#125;<br>        &#125;);<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="自增推荐使用LongAddr"><a href="#自增推荐使用LongAddr" class="headerlink" title="自增推荐使用LongAddr"></a>自增推荐使用LongAddr</h3><p>这个点需要大家自行去验证一下～</p><p>自增运算可以通过 synchronized 和 volatile 的组合来控制线程安全，或者也可以使用原子类（比如 AtomicLong）。</p><p>后者的速度比前者要高一些，AtomicLong 使用 CAS 进行比较替换，在线程多的情况下会造成过多无效自旋，可以使用 LongAdder 替换 AtomicLong 进行进一步的性能提升。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longAdderTest</span><span class="hljs-params">(Blackhole blackhole)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">LongAdder</span> <span class="hljs-variable">longAdder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongAdder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1024</span>; i++) &#123;<br>            longAdder.add(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> longAdder.intValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="程序中要少用反射"><a href="#程序中要少用反射" class="headerlink" title="程序中要少用反射"></a>程序中要少用反射</h3><p>反射的功能很强大，但它是通过解析字节码实现的，性能就不是很理想。</p><p>现实中有很多对反射的优化方法，比如把反射执行的过程（比如 Method）缓存起来，使用复用来加快反射速度。</p><p><strong>Java 7.0 之后，加入了新的包<code>java.lang.invoke</code>，同时加入了新的 JVM 字节码指令 invokedynamic，用来支持从 JVM 层面，直接通过字符串对目标方法进行调用。</strong></p>]]></content>
    
    
    <summary type="html">代码优化是一个循序渐进和经验累积的过程～</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="java" scheme="https://gcoder5.com/tags/java/"/>
    
    <category term="调优" scheme="https://gcoder5.com/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>那些我们常见的Linux命令</title>
    <link href="https://gcoder5.com/2023/03/18/%E9%82%A3%E4%BA%9B%E6%88%91%E4%BB%AC%E5%B8%B8%E8%A7%81%E7%9A%84Linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://gcoder5.com/2023/03/18/%E9%82%A3%E4%BA%9B%E6%88%91%E4%BB%AC%E5%B8%B8%E8%A7%81%E7%9A%84Linux%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-18T14:15:32.000Z</published>
    <updated>2023-03-18T14:17:58.896Z</updated>
    
    <content type="html"><![CDATA[<p>今天偷个懒，这是之前收集到一些日常linux操作会用到的命令，在这里做个记录哈～ 此后根据使用情况再持续更新！</p><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示机器的处理器架构</span><br><span class="hljs-built_in">arch</span><br><span class="hljs-comment"># 显示机器的处理器架构</span><br><span class="hljs-built_in">uname</span> -m<br><span class="hljs-comment"># 显示正在使用的内核版本</span><br><span class="hljs-built_in">uname</span> -r<br><span class="hljs-comment"># 显示硬件系统部件（SMBIOS／DMI）</span><br>dmidecode -q<br><span class="hljs-comment"># 显示CPU info的信息</span><br><span class="hljs-built_in">cat</span> /proc/cpuinfo<br><span class="hljs-comment"># 校验内存使用</span><br><span class="hljs-built_in">cat</span> /proc/meminfo<br><span class="hljs-comment"># 查看内核版本</span><br><span class="hljs-built_in">cat</span> /proc/version<br><span class="hljs-comment"># 显示系统日期</span><br><span class="hljs-built_in">date</span><br><span class="hljs-comment"># 显示2021年的日历表</span><br>cal 2021<br><span class="hljs-comment"># 设置日期和时间-月日时分年.秒</span><br><span class="hljs-built_in">date</span> 041217002007.00<br><span class="hljs-comment"># 将时间修改保存到BIOS</span><br>clock -w<br></code></pre></td></tr></table></figure><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 立刻关机</span><br>shutdown -h now<br><span class="hljs-comment"># 关机</span><br>init 0<br><span class="hljs-comment"># 关机</span><br>telinit 0<br><span class="hljs-comment"># 按预定时间关机</span><br>shutdown -h hours:minutes &amp;<br><span class="hljs-comment"># 取消按预定时间关机</span><br>shutdown -c<br><span class="hljs-comment"># 重启</span><br>shutdown -r now<br><span class="hljs-comment"># 重启</span><br>reboot<br><span class="hljs-comment"># 注销</span><br><span class="hljs-built_in">logout</span><br></code></pre></td></tr></table></figure><h3 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示工作路径</span><br><span class="hljs-built_in">pwd</span><br><span class="hljs-comment"># 查看目录中的文件（可区分开是否文件夹）</span><br><span class="hljs-built_in">ls</span> -F<br><span class="hljs-comment"># 显示文件和目录的详细资料</span><br><span class="hljs-built_in">ls</span> -l<br><span class="hljs-comment"># 显示隐藏文件</span><br><span class="hljs-built_in">ls</span> -a<br><span class="hljs-comment"># 显示包含数字的文件名和目录名</span><br><span class="hljs-built_in">ls</span> *[0-9]*<br><span class="hljs-comment"># 显示文件和目录由根目录开始的树形结构(需要安装tree)</span><br>tree<br><span class="hljs-comment"># 创建一个目录树</span><br><span class="hljs-built_in">mkdir</span> -p /tmp/dir1/dir2<br><span class="hljs-comment"># 强制删除文件</span><br><span class="hljs-built_in">rm</span> -f file<br><span class="hljs-comment"># 强制删除文件夹</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-built_in">dir</span><br><span class="hljs-comment"># 删除多个文件夹</span><br><span class="hljs-built_in">rm</span> -rf dir1 dir2<br><span class="hljs-comment"># 复制一个文件夹</span><br><span class="hljs-built_in">cp</span> -a dir1 dir2<br><span class="hljs-comment"># 复制一个文件夹及其子文件</span><br><span class="hljs-built_in">cp</span> -r dir1 dir2<br><span class="hljs-comment"># 创建一个指向文件或目录的软链接</span><br><span class="hljs-built_in">ln</span> -s file1 lnk1<br><span class="hljs-comment"># 创建一个指向文件或目录的物理链接</span><br><span class="hljs-built_in">ln</span> file1 lnk1<br><span class="hljs-comment"># 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</span><br><span class="hljs-built_in">touch</span> -t 0712250000 file1<br><span class="hljs-comment"># 列出已知的编码</span><br>iconv -l<br></code></pre></td></tr></table></figure><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从&#x27;/&#x27;开始进入根文件系统搜索文件和目录</span><br>find / -name file1<br><span class="hljs-comment"># 搜索属于用户&#x27;user1&#x27;的文件和目录</span><br>find -user user1<br><span class="hljs-comment"># 在目录&#x27;/home/user1&#x27;中搜索带有&#x27;.bin&#x27;结尾的文件</span><br>find /home/user1 -name \\*.bin<br><span class="hljs-comment"># 搜索在过去100天内未被使用的执行文件</span><br>find /usr/bin -<span class="hljs-built_in">type</span> f -atime +100 <br><span class="hljs-comment"># 搜索在10天内被创建或者修改过的问题件</span><br>find /usr/bin -<span class="hljs-built_in">type</span> f -mtime -10<br><span class="hljs-comment"># 搜索以&#x27;.rpm&#x27;结尾的文件并定义其权限</span><br>find / -name \\*.rpm -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">chmod</span> 755 <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>\\<br><span class="hljs-comment"># 搜索以&#x27;.rpm&#x27;结尾的文件，忽略光驱、捷盘等可移动设备</span><br>find / -xdev -name \\*.rpm<br><span class="hljs-comment"># 显示一个二进制文件、源码或man的位置</span><br>whereis halt<br><span class="hljs-comment"># 显示一个二进制文件或可执行文件的完整路径</span><br><span class="hljs-built_in">which</span> halt<br></code></pre></td></tr></table></figure><h3 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 挂载一个叫做hda2的盘 -确定目录 &#x27;/mnt/hda2&#x27;已经存在</span><br>mount /dev/hda2 /mnt/hda2<br><span class="hljs-comment"># 卸载一个叫做hda2的盘 -先从挂载点&#x27;/mnt/hda2&#x27;退出</span><br>umount /dev/hda2<br><span class="hljs-comment"># 当设备繁忙时强制卸载</span><br>fuser -km /mnt/hda2<br><span class="hljs-comment"># 挂载一个usb 捷盘或闪存设备</span><br>mount /dev/sda1 /mnt/usbdisk<br></code></pre></td></tr></table></figure><h3 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示已经挂载的分区列表</span><br><span class="hljs-built_in">df</span> -h<br><span class="hljs-comment"># 以尺寸大小排列文件和目录</span><br><span class="hljs-built_in">ls</span> -lSr |more<br><span class="hljs-comment"># 估算目录&#x27;dir1&#x27;已经使用的磁盘空间</span><br><span class="hljs-built_in">du</span> -sh dir1<br><span class="hljs-comment"># 以容量大小为依据依次显示文件和目录的大小</span><br><span class="hljs-built_in">du</span> -sk * |<span class="hljs-built_in">sort</span> -rn<br><span class="hljs-comment"># 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</span><br>rpm -q -a --qf<span class="hljs-string">&#x27;%10&#123;SIZE&#125;t%&#123;NAME&#125;n&#x27;</span>|<span class="hljs-built_in">sort</span> -k1,1n<br><span class="hljs-comment"># 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</span><br>dpkg-query -W -f=<span class="hljs-string">&#x27;$&#123;Installed-Size;10&#125;t$&#123;Package&#125;n&#x27;</span>|<span class="hljs-built_in">sort</span> -k1,1n<br><span class="hljs-comment"># 查看磁盘空间占用最大的文件并【排序</span><br><span class="hljs-built_in">du</span> -h --max-depth=1 | grep <span class="hljs-string">&#x27;G&#x27;</span> | <span class="hljs-built_in">sort</span> -nr<br></code></pre></td></tr></table></figure><h3 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个新用户组</span><br>groupadd group_name<br><span class="hljs-comment"># 删除一个用户组</span><br>groupdel group_name<br><span class="hljs-comment"># 重命名一个用户组</span><br>groupmod -n new_group_name okd_group_name<br><span class="hljs-comment"># 创建一个属于&quot;admin&quot;用户组的用户</span><br>useradd -c <span class="hljs-string">&quot;Name Surname &quot;</span> -g admin -d /home/user1 -s /bin/bash user1<br><span class="hljs-comment"># 创建一个用户</span><br>useradd user1<br><span class="hljs-comment"># 删除一个用户(-r排除主目录)</span><br>userdel -r user1<br><span class="hljs-comment"># 修改用户属性</span><br>usermod -c <span class="hljs-string">&quot;User FTP&quot;</span> -g system -d /ftp/user1 -s /bin/nologin user1<br><span class="hljs-comment"># 修改口令</span><br>passwd<br><span class="hljs-comment"># 修改一个用户的口令(只允许root执行)</span><br>passwd user1<br><span class="hljs-comment"># 设置用户口令的失效期限</span><br>chage -E 2005-12-31 user1<br></code></pre></td></tr></table></figure><h3 id="文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示权限</span><br><span class="hljs-built_in">ls</span> -lh<br><span class="hljs-comment"># 将终端划分成5栏显示</span><br><span class="hljs-built_in">ls</span> /tmp | <span class="hljs-built_in">pr</span> -T5 -W<span class="hljs-variable">$COLUMNS</span><br><span class="hljs-comment"># 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</span><br><span class="hljs-built_in">chmod</span> ugo+rwx directory1<br><span class="hljs-comment"># 删除群组(g)与其他人(o)对目录的读写执行权限</span><br><span class="hljs-built_in">chmod</span> go-rwx directory1<br><span class="hljs-comment"># 改变一个文件的所有人属性</span><br><span class="hljs-built_in">chown</span> user1 file1<br><span class="hljs-comment"># 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</span><br><span class="hljs-built_in">chown</span> -R user1 directory1<br><span class="hljs-comment"># 改变文件的群组</span><br><span class="hljs-built_in">chgrp</span> group1 file1<br><span class="hljs-comment"># 改变一个文件的所有人和群组属性</span><br><span class="hljs-built_in">chown</span> user1:group1 file1<br></code></pre></td></tr></table></figure><h3 id="root用户都删除不了的文件"><a href="#root用户都删除不了的文件" class="headerlink" title="root用户都删除不了的文件"></a>root用户都删除不了的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 给文件设置ATTRIBUTES </span><br><span class="hljs-comment"># a 属性的文件只能在添加模式下打开用于写入.只有超级用户可以设置或清除该属性</span><br><span class="hljs-comment"># c 设置了`c&#x27;属性的文件在磁盘上由内核自动进行压缩处理</span><br><span class="hljs-comment"># d 设置了`d&#x27;属性的文件不能对其运行 dump(8) 程序进行备份</span><br><span class="hljs-comment"># i 设置了`i&#x27;属性的文件不能进行修改:你既不能删除它,也不能给它重新命名,你不能对该文件创建链接,而且也不能对该文件写入任何数据.只有超级用户可以设置或清除该属性</span><br><span class="hljs-comment"># s 当删除设置了`s&#x27;属性的文件时,将对其数据块清零并写回到磁盘上</span><br><span class="hljs-comment"># S 当修改设置了`S&#x27;属性的文件时,修改会同步写入到磁盘上;这与应用到文件子系统上的`sync&#x27;挂载选项有相同的效果</span><br><span class="hljs-comment"># u 当删除设置了`u&#x27;属性的文件时,            将会保存其内容.这使得用户可以请求恢复被删除的文件</span><br>chattr +a test.txt  <span class="hljs-comment">#添加a属性</span><br>chattr -a test.txt  <span class="hljs-comment">#去掉a属性</span><br>lsattr test.txt <span class="hljs-comment">#查看文件的属性</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">作为开发，我们的linux也是必须要会的！</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="linux" scheme="https://gcoder5.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github+namesilo搭建个人博客</title>
    <link href="https://gcoder5.com/2023/03/16/hexo-github-namesilo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://gcoder5.com/2023/03/16/hexo-github-namesilo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-03-15T22:53:35.000Z</published>
    <updated>2023-03-15T23:10:02.061Z</updated>
    
    <content type="html"><![CDATA[<p>嗨！艾瑞巴蒂，今天没有继续学习《大数据原理与技术》，所以摘要还没有继续更新。但是今天早起了，所以找了下前段时间搭建这个博客所记录的文章，今天把它整理好放在这里供大家参考～</p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-Github账号"><a href="#1-Github账号" class="headerlink" title="1.Github账号"></a>1.Github账号</h3><blockquote><p>需要有一个<code>GitHub</code>账号，没有的话到 <a href="https://github.com/">官网</a> 申请一个。</p></blockquote><h3 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h3><blockquote><p>在自己电脑上安装好<code>Git</code>，<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>部署到<code>GitHub</code>时要用。</p></blockquote><h3 id="3-安装NodeJS"><a href="#3-安装NodeJS" class="headerlink" title="3.安装NodeJS"></a>3.安装NodeJS</h3><blockquote><p>在自己电脑上安装好<code>NodeJS</code>，<code>Hexo</code>是基于<code>NodeJS</code>编写的，所以需要安装<code>NodeJS</code>和<code>npm</code>工具。</p></blockquote><h2 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h2><h3 id="1-填写仓库名，格式必须为-lt-用户名-gt-github-io，然后点击Create-repository。"><a href="#1-填写仓库名，格式必须为-lt-用户名-gt-github-io，然后点击Create-repository。" class="headerlink" title="1.填写仓库名，格式必须为&lt;用户名&gt;.github.io，然后点击Create repository。"></a>1.填写仓库名，格式必须为<code>&lt;用户名&gt;.github.io</code>，然后点击<code>Create repository</code>。</h3><p><img src="https://p.ipic.vip/q9vdvj.png" alt="image-20230316065824096"></p><h3 id="2-点击creating-a-new-file创建一个新文件，作为我们网站的主页。"><a href="#2-点击creating-a-new-file创建一个新文件，作为我们网站的主页。" class="headerlink" title="2.点击creating a new file创建一个新文件，作为我们网站的主页。"></a>2.点击<code>creating a new file</code>创建一个新文件，作为我们网站的主页。</h3><p><img src="https://p.ipic.vip/0kvx9z.png" alt="image-20230316065907803"></p><p>新文件的名字必须为<code>index.html</code>，内容先随便写一个简单的，内容示例如下，填写之后点击<code>Commit new file</code>提交。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>gcoder<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>gcoder的个人主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-访问github地址（https-x2F-x2F-用户名-github-io-x2F-）"><a href="#3-访问github地址（https-x2F-x2F-用户名-github-io-x2F-）" class="headerlink" title="3.访问github地址（https:&#x2F;&#x2F;[用户名].github.io&#x2F;）"></a>3.访问github地址（https:&#x2F;&#x2F;[用户名].github.io&#x2F;）</h3><p><img src="https://p.ipic.vip/lwndvg.png" alt="image-20230316065932482"></p><h2 id="三、安装hexo"><a href="#三、安装hexo" class="headerlink" title="三、安装hexo"></a>三、安装hexo</h2><blockquote><p>我们采用<code>Hexo</code>来创建我们的博客网站，<code>Hexo</code>是一个基于<code>NodeJS</code>的静态博客网站生成器，使用<code>Hexo</code>不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入 <a href="https://hexo.io/zh-cn/">官网</a>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装Hexo</span><br>npm install -g hexo-cli<br><span class="hljs-comment"># 查看版本</span><br>hexo -v<br><span class="hljs-comment"># 创建一个hexo-blog并初始化</span><br>hexo init hexo-blog<br><span class="hljs-built_in">cd</span> hexo-blog<br>npm install<br><span class="hljs-comment"># 本地启动</span><br>hexo g<br>hexo server 或 hexo s<br></code></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:4000/">http://localhost:4000</a></p><p><img src="https://p.ipic.vip/mem78y.png" alt="image-20230316070002415"></p><h2 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><h3 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.<strong>安装主题</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建_config.fluid.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># Hexo Theme Fluid</span><br><span class="hljs-comment"># Author: Fluid-dev</span><br><span class="hljs-comment"># Github: &lt;https://github.com/fluid-dev/hexo-theme-fluid&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 配置指南: &lt;https://hexo.fluid-dev.com/docs/guide/&gt;</span><br><span class="hljs-comment"># 你可以从指南中获得更详细的说明</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Guide: &lt;https://hexo.fluid-dev.com/docs/en/guide/&gt;</span><br><span class="hljs-comment"># You can get more detailed help from the guide</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 全局</span><br><span class="hljs-comment"># Global</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-comment"># Icon for browser tab</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/fluid.png</span><br><br><span class="hljs-comment"># 用于苹果设备的图标</span><br><span class="hljs-comment"># Icon for Apple touch</span><br><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/fluid.png</span><br><br><span class="hljs-comment"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span><br><span class="hljs-comment"># Title separator in browser tab, eg: article - site</span><br><span class="hljs-attr">tab_title_separator:</span> <span class="hljs-string">&quot; - &quot;</span><br><br><span class="hljs-comment"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span><br><span class="hljs-comment"># Force all links to be HTTPS (applicable to HTTP mixed error)</span><br><span class="hljs-attr">force_https:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 代码块的增强配置</span><br><span class="hljs-comment"># Enhancements to code blocks</span><br><span class="hljs-attr">code:</span><br>  <span class="hljs-comment"># 是否开启复制代码的按钮</span><br>  <span class="hljs-comment"># Enable copy code button</span><br>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 代码语言</span><br>  <span class="hljs-comment"># Code language</span><br>  <span class="hljs-attr">language:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;TEXT&quot;</span><br><br>  <span class="hljs-comment"># 代码高亮</span><br>  <span class="hljs-comment"># Code highlight</span><br>  <span class="hljs-attr">highlight:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 代码块是否显示行号</span><br>    <span class="hljs-comment"># If true, the code block display line numbers</span><br>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 实现高亮的库，对应下面的设置</span><br>    <span class="hljs-comment"># Highlight library</span><br>    <span class="hljs-comment"># Options: highlightjs | prismjs</span><br>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><br><br>    <span class="hljs-attr">highlightjs:</span><br>      <span class="hljs-comment"># 在链接中挑选 style 填入</span><br>      <span class="hljs-comment"># Select a style in the link</span><br>      <span class="hljs-comment"># See: &lt;https://highlightjs.org/static/demo/&gt;</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;github gist&quot;</span><br>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span><br><br>    <span class="hljs-attr">prismjs:</span><br>      <span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span><br>      <span class="hljs-comment"># Select the style button on the right side of the link page, you can also set the CSS link</span><br>      <span class="hljs-comment"># See: &lt;https://prismjs.com/&gt;</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><br>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;tomorrow night&quot;</span><br><br>      <span class="hljs-comment"># 设为 true 高亮将本地静态生成（但只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span><br>      <span class="hljs-comment"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span><br>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 一些好玩的功能</span><br><span class="hljs-comment"># Some fun features</span><br><span class="hljs-attr">fun_features:</span><br>  <span class="hljs-comment"># 为 subtitle 添加打字机效果</span><br>  <span class="hljs-comment"># Typing animation for subtitle</span><br>  <span class="hljs-attr">typing:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 打印速度，数字越大越慢</span><br>    <span class="hljs-comment"># Typing speed, the larger the number, the slower</span><br>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span><br><br>    <span class="hljs-comment"># 游标字符</span><br>    <span class="hljs-comment"># Cursor character</span><br>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span><br><br>    <span class="hljs-comment"># 是否循环播放效果</span><br>    <span class="hljs-comment"># If true, loop animation</span><br>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 在指定页面开启，不填则在所有页面开启</span><br>    <span class="hljs-comment"># Enable in specified page, all pages by default</span><br>    <span class="hljs-comment"># Options: home | post | tag | category | about | links | page | 404</span><br>    <span class="hljs-attr">scope:</span> []<br><br>  <span class="hljs-comment"># 为文章内容中的标题添加锚图标</span><br>  <span class="hljs-comment"># Add an anchor icon to the title on the post page</span><br>  <span class="hljs-attr">anchorjs:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">element:</span> <span class="hljs-string">h1,h2,h3,h4,h5,h6</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span><br>    <span class="hljs-comment"># Options: hover | always | touch</span><br>    <span class="hljs-attr">visible:</span> <span class="hljs-string">hover</span><br>    <span class="hljs-comment"># Options: § | # | ❡</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;&quot;</span><br><br>  <span class="hljs-comment"># 加载进度条</span><br>  <span class="hljs-comment"># Progress bar when loading</span><br>  <span class="hljs-attr">progressbar:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">height_px:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#29d&quot;</span><br>    <span class="hljs-comment"># See: &lt;https://github.com/rstacruz/nprogress&gt;</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">showSpinner:</span> <span class="hljs-literal">false</span>, <span class="hljs-attr">trickleSpeed:</span> <span class="hljs-number">100</span> &#125;<br><br><span class="hljs-comment"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span><br><span class="hljs-comment"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option</span><br><span class="hljs-attr">dark_mode:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span><br>  <span class="hljs-comment"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span><br>  <span class="hljs-comment"># Options: auto | light | dark</span><br>  <span class="hljs-attr">default:</span> <span class="hljs-string">auto</span><br><br><span class="hljs-comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><br><span class="hljs-comment"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span><br><span class="hljs-comment"># See: &lt;https://www.webdesignrankings.com/resources/lolcolors/&gt;</span><br><span class="hljs-attr">color:</span><br>  <span class="hljs-comment"># body 背景色</span><br>  <span class="hljs-comment"># Color of body background</span><br>  <span class="hljs-attr">body_bg_color:</span> <span class="hljs-string">&quot;#eee&quot;</span><br>  <span class="hljs-comment"># 暗色模式下的 body 背景色，下同</span><br>  <span class="hljs-comment"># Color in dark mode, the same below</span><br>  <span class="hljs-attr">body_bg_color_dark:</span> <span class="hljs-string">&quot;#181c27&quot;</span><br><br>  <span class="hljs-comment"># 顶部菜单背景色</span><br>  <span class="hljs-comment"># Color of navigation bar background</span><br>  <span class="hljs-attr">navbar_bg_color:</span> <span class="hljs-string">&quot;#2f4154&quot;</span><br>  <span class="hljs-attr">navbar_bg_color_dark:</span> <span class="hljs-string">&quot;#1f3144&quot;</span><br><br>  <span class="hljs-comment"># 顶部菜单字体色</span><br>  <span class="hljs-comment"># Color of navigation bar text</span><br>  <span class="hljs-attr">navbar_text_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">navbar_text_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span><br><br>  <span class="hljs-comment"># 副标题字体色</span><br>  <span class="hljs-comment"># Color of navigation bar text</span><br>  <span class="hljs-attr">subtitle_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">subtitle_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span><br><br>  <span class="hljs-comment"># 全局字体色</span><br>  <span class="hljs-comment"># Color of global text</span><br>  <span class="hljs-attr">text_color:</span> <span class="hljs-string">&quot;#3c4858&quot;</span><br>  <span class="hljs-attr">text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 全局次级字体色（摘要、简介等位置）</span><br>  <span class="hljs-comment"># Color of global secondary text (excerpt, introduction, etc.)</span><br>  <span class="hljs-attr">sec_text_color:</span> <span class="hljs-string">&quot;#718096&quot;</span><br>  <span class="hljs-attr">sec_text_color_dark:</span> <span class="hljs-string">&quot;#a7a9ad&quot;</span><br><br>  <span class="hljs-comment"># 主面板背景色</span><br>  <span class="hljs-comment"># Color of main board</span><br>  <span class="hljs-attr">board_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">board_color_dark:</span> <span class="hljs-string">&quot;#252d38&quot;</span><br><br>  <span class="hljs-comment"># 文章正文字体色</span><br>  <span class="hljs-comment"># Color of post text</span><br>  <span class="hljs-attr">post_text_color:</span> <span class="hljs-string">&quot;#2c3e50&quot;</span><br>  <span class="hljs-attr">post_text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 文章正文字体色（h1 h2 h3...）</span><br>  <span class="hljs-comment"># Color of Article heading (h1 h2 h3...)</span><br>  <span class="hljs-attr">post_heading_color:</span> <span class="hljs-string">&quot;#1a202c&quot;</span><br>  <span class="hljs-attr">post_heading_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 文章超链接字体色</span><br>  <span class="hljs-comment"># Color of post link</span><br>  <span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#0366d6&quot;</span><br>  <span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#1589e9&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮时字体色</span><br>  <span class="hljs-comment"># Color of link when hovering</span><br>  <span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#30a9de&quot;</span><br>  <span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#30a9de&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮背景色</span><br>  <span class="hljs-comment"># Color of link background when hovering</span><br>  <span class="hljs-attr">link_hover_bg_color:</span> <span class="hljs-string">&quot;#f8f9fa&quot;</span><br>  <span class="hljs-attr">link_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#364151&quot;</span><br><br>  <span class="hljs-comment"># 分隔线和表格边线的颜色</span><br>  <span class="hljs-comment"># Color of horizontal rule and table border</span><br>  <span class="hljs-attr">line_color:</span> <span class="hljs-string">&quot;#eaecef&quot;</span><br>  <span class="hljs-attr">line_color_dark:</span> <span class="hljs-string">&quot;#435266&quot;</span><br><br>  <span class="hljs-comment"># 滚动条颜色</span><br>  <span class="hljs-comment"># Color of scrollbar</span><br>  <span class="hljs-attr">scrollbar_color:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br>  <span class="hljs-attr">scrollbar_color_dark:</span> <span class="hljs-string">&quot;#687582&quot;</span><br>  <span class="hljs-comment"># 滚动条悬浮颜色</span><br>  <span class="hljs-comment"># Color of scrollbar when hovering</span><br>  <span class="hljs-attr">scrollbar_hover_color:</span> <span class="hljs-string">&quot;#a6a6a6&quot;</span><br>  <span class="hljs-attr">scrollbar_hover_color_dark:</span> <span class="hljs-string">&quot;#9da8b3&quot;</span><br><br>  <span class="hljs-comment"># 按钮背景色</span><br>  <span class="hljs-comment"># Color of button</span><br>  <span class="hljs-attr">button_bg_color:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>  <span class="hljs-attr">button_bg_color_dark:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>  <span class="hljs-comment"># 按钮悬浮背景色</span><br>  <span class="hljs-comment"># Color of button when hovering</span><br>  <span class="hljs-attr">button_hover_bg_color:</span> <span class="hljs-string">&quot;#f2f3f5&quot;</span><br>  <span class="hljs-attr">button_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#46647e&quot;</span><br><br><span class="hljs-comment"># 主题字体配置</span><br><span class="hljs-comment"># Font</span><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">16px</span><br>  <span class="hljs-attr">font_family:</span><br>  <span class="hljs-attr">letter_spacing:</span> <span class="hljs-number">0.</span><span class="hljs-string">02em</span><br>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><br><br><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><br><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><br><span class="hljs-attr">custom_js:</span><br><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attr">custom_css:</span><br><br><span class="hljs-comment"># 网页访问统计</span><br><span class="hljs-comment"># Analysis of website visitors</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 遵循访客浏览器&quot;请勿追踪&quot;的设置，如果开启则不统计其访问</span><br>  <span class="hljs-comment"># Follow the &quot;Do Not Track&quot; setting of the visitor&#x27;s browser</span><br>  <span class="hljs-comment"># See: &lt;https://www.w3.org/TR/tracking-dnt/&gt;</span><br>  <span class="hljs-attr">follow_dnt:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span><br>  <span class="hljs-comment"># Baidu analytics, get the string behind `hm.js?`</span><br>  <span class="hljs-comment"># See: &lt;https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376&gt;</span><br>  <span class="hljs-attr">baidu:</span><br><br>  <span class="hljs-comment"># Google 统计的 Tracking ID</span><br>  <span class="hljs-comment"># Google analytics, set Tracking ID</span><br>  <span class="hljs-comment"># See: &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs&gt;</span><br>  <span class="hljs-attr">google:</span><br><br>  <span class="hljs-comment"># Google gtag.js 的媒体资源 ID</span><br>  <span class="hljs-comment"># Google gtag.js GA_MEASUREMENT_ID</span><br>  <span class="hljs-comment"># See: &lt;https://developers.google.com/analytics/devguides/collection/gtagjs/&gt;</span><br>  <span class="hljs-attr">gtag:</span><br><br>  <span class="hljs-comment"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span><br>  <span class="hljs-comment"># Tencent analytics, set APP ID</span><br>  <span class="hljs-comment"># See: &lt;https://mta.qq.com/h5/manage/ctr_app_manage&gt;</span><br>  <span class="hljs-attr">tencent:</span><br>    <span class="hljs-attr">sid:</span><br>    <span class="hljs-attr">cid:</span><br><br>  <span class="hljs-comment"># 51.la 站点统计 ID</span><br>  <span class="hljs-comment"># 51.la analytics</span><br>  <span class="hljs-comment"># See: &lt;https://www.51.la/user/site/index&gt;</span><br>  <span class="hljs-attr">woyaola:</span>  <span class="hljs-comment"># 51.la 站点统计 ID，参见</span><br><br>  <span class="hljs-comment"># 友盟/cnzz 站点统计 web_id</span><br>  <span class="hljs-comment"># cnzz analytics</span><br>  <span class="hljs-comment"># See: &lt;https://web.umeng.com/main.php?c=site&amp;a=show&gt;</span><br>  <span class="hljs-attr">cnzz:</span><br><br>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><br>  <span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span><br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span><br>    <span class="hljs-attr">app_key:</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br>    <span class="hljs-attr">server_url:</span><br>    <span class="hljs-comment"># 统计页面时获取路径的属性</span><br>    <span class="hljs-comment"># Get the attribute of the page path during statistics</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>    <span class="hljs-comment"># If true, ignore localhost &amp; 127.0.0.1</span><br>    <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载</span><br><span class="hljs-comment"># Lazy loading of images and comment plugin on the page</span><br><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 加载时的占位图片</span><br>  <span class="hljs-comment"># The placeholder image when loading</span><br>  <span class="hljs-attr">loading_img:</span> <span class="hljs-string">/img/loading.gif</span><br><br>  <span class="hljs-comment"># 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span><br>  <span class="hljs-comment"># If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节</span><br>  <span class="hljs-comment"># The factor of viewport height that triggers loading</span><br>  <span class="hljs-attr">offset_factor:</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 &lt;https://hexo.fluid-dev.com/docs/icon/&gt;</span><br><span class="hljs-comment"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: &lt;https://hexo.fluid-dev.com/docs/en/icon/&gt;</span><br><span class="hljs-attr">iconfont:</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_lbnruvf0jn.css</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页头</span><br><span class="hljs-comment"># Header</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 导航栏的相关配置</span><br><span class="hljs-comment"># Navigation bar</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;Fluid&quot;</span><br><br>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span><br>  <span class="hljs-comment"># Navigation bar frosted glass special animation. It is an experimental feature</span><br>  <span class="hljs-attr">ground_glass:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span><br>    <span class="hljs-comment"># Number of blurred pixel. the larger the number, the higher the blur</span><br>    <span class="hljs-attr">px:</span> <span class="hljs-number">3</span><br><br>    <span class="hljs-comment"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span><br>    <span class="hljs-comment"># Ratio of opacity, 1.0 is completely opaque</span><br>    <span class="hljs-comment"># available: 0 - 1.0</span><br>    <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.7</span><br><br>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br>  <span class="hljs-comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>    <span class="hljs-comment">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span><br><br><span class="hljs-comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span><br><span class="hljs-comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span><br>  <span class="hljs-comment"># Path for search index file, it can be a relative path or an absolute path</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/local-search.xml</span><br><br>  <span class="hljs-comment"># 文件生成在本地的位置，必须是相对路径</span><br>  <span class="hljs-comment"># The location where the index file is generated locally, it must be a relative location</span><br>  <span class="hljs-attr">generate_path:</span> <span class="hljs-string">/local-search.xml</span><br><br>  <span class="hljs-comment"># 搜索的范围</span><br>  <span class="hljs-comment"># Search field</span><br>  <span class="hljs-comment"># Options: post | page | all</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br><br>  <span class="hljs-comment"># 搜索是否扫描正文</span><br>  <span class="hljs-comment"># If true, search will scan the post content</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 首屏图片的相关配置</span><br><span class="hljs-comment"># Config of the big image on the first screen</span><br><span class="hljs-attr">banner:</span><br>  <span class="hljs-comment"># 视差滚动，图片与板块会随着屏幕滚动产生视差效果</span><br>  <span class="hljs-comment"># Scrolling parallax</span><br>  <span class="hljs-attr">parallax:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0</span><br>  <span class="hljs-comment"># Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0</span><br>  <span class="hljs-attr">width_height_ratio:</span> <span class="hljs-number">1.0</span><br><br><span class="hljs-comment"># 向下滚动的箭头</span><br><span class="hljs-comment"># Scroll down arrow</span><br><span class="hljs-attr">scroll_down_arrow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 头图高度不小于指定比例，才显示箭头</span><br>  <span class="hljs-comment"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span><br>  <span class="hljs-comment"># Available: 0 - 100</span><br>  <span class="hljs-attr">banner_height_limit:</span> <span class="hljs-number">80</span><br><br>  <span class="hljs-comment"># 翻页后自动滚动</span><br>  <span class="hljs-comment"># Auto scroll after page turning</span><br>  <span class="hljs-attr">scroll_after_turning_page:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 向顶部滚动的箭头</span><br><span class="hljs-comment"># Scroll top arrow</span><br><span class="hljs-attr">scroll_top_arrow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Open Graph metadata</span><br><span class="hljs-comment"># See: &lt;https://hexo.io/docs/helpers.html#open-graph&gt;</span><br><span class="hljs-attr">open_graph:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">twitter_card:</span> <span class="hljs-string">summary_large_image</span><br>  <span class="hljs-attr">twitter_id:</span><br>  <span class="hljs-attr">twitter_site:</span><br>  <span class="hljs-attr">google_plus:</span><br>  <span class="hljs-attr">fb_admins:</span><br>  <span class="hljs-attr">fb_app_id:</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页脚</span><br><span class="hljs-comment"># Footer</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;&lt;https://hexo.io&gt;&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;&lt;https://github.com/fluid-dev/hexo-theme-fluid&gt;&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">  &#x27;</span><br><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-comment"># Display website PV and UV statistics</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span><br>    <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span><br>    <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br><br>  <span class="hljs-comment"># 国内大陆服务器的备案信息</span><br>  <span class="hljs-comment"># For Chinese mainland website policy, other areas keep disable</span><br>  <span class="hljs-attr">beian:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># ICP证号</span><br>    <span class="hljs-attr">icp_text:</span> <span class="hljs-string">京ICP证123456号</span><br>    <span class="hljs-comment"># 公安备案号，不填则只显示ICP</span><br>    <span class="hljs-attr">police_text:</span> <span class="hljs-string">京公网安备12345678号</span><br>    <span class="hljs-comment"># 公安备案的编号，用于URL跳转查询</span><br>    <span class="hljs-attr">police_code:</span> <span class="hljs-number">12345678</span><br>    <span class="hljs-comment"># 公安备案的图片. 为空时不显示备案图片</span><br>    <span class="hljs-attr">police_icon:</span> <span class="hljs-string">/img/police_beian.png</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 首页</span><br><span class="hljs-comment"># Home Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br><br>  <span class="hljs-comment"># 头图高度，屏幕百分比</span><br>  <span class="hljs-comment"># Height ratio of banner image</span><br>  <span class="hljs-comment"># Available: 0 - 100</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br><br>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span><br>  <span class="hljs-comment"># Opacity of the banner mask, 1.0 is completely opaque</span><br>  <span class="hljs-comment"># Available: 0 - 1.0</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-comment"># Independent config of home page subtitle</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;An elegant Material-Design theme for Hexo&quot;</span><br><br>    <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span><br>    <span class="hljs-comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-comment"># 请求地址</span><br>      <span class="hljs-comment"># Request url</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;&quot;</span><br><br>      <span class="hljs-comment"># 请求方法</span><br>      <span class="hljs-comment"># Request method</span><br>      <span class="hljs-comment"># Available: GET | POST | PUT</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br><br>      <span class="hljs-comment"># 请求头</span><br>      <span class="hljs-comment"># Request headers</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br><br>      <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span><br>      <span class="hljs-comment"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span><br>      <span class="hljs-attr">keys:</span> []<br><br>  <span class="hljs-comment"># 自动截取文章摘要</span><br>  <span class="hljs-comment"># Auto extract post</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 打开文章的标签方式</span><br>  <span class="hljs-comment"># The browser tag to open the post</span><br>  <span class="hljs-comment"># Available: _blank | _self</span><br>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span><br><br>  <span class="hljs-comment"># 是否显示文章信息（时间、分类、标签）</span><br>  <span class="hljs-comment"># Meta information of post</span><br>  <span class="hljs-attr">post_meta:</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span><br>  <span class="hljs-comment"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-top&quot;</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-comment"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span><br>  <span class="hljs-attr">default_index_img:</span><br><br>  <span class="hljs-comment"># 文章标题下方的元信息</span><br>  <span class="hljs-comment"># Meta information below title</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>    <span class="hljs-comment"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>    <span class="hljs-comment"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span><br>    <span class="hljs-attr">date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>      <span class="hljs-comment"># ISO-8601 date format</span><br>      <span class="hljs-comment"># See: &lt;http://momentjs.cn/docs/#/parsing/string-format/&gt;</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL a&quot;</span><br><br>    <span class="hljs-comment"># 字数统计</span><br>    <span class="hljs-comment"># Word count</span><br>    <span class="hljs-attr">wordcount:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 估计阅读全文需要的时长</span><br>    <span class="hljs-comment"># Estimated reading time</span><br>    <span class="hljs-attr">min2read:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节</span><br>      <span class="hljs-comment"># Average word length (chars count in word), ZH ≈ 2, EN ≈ 5</span><br>      <span class="hljs-attr">awl:</span> <span class="hljs-number">2</span><br>      <span class="hljs-comment"># 每分钟阅读字数，如果大部分是技术文章可适度调低</span><br>      <span class="hljs-comment"># Words per minute</span><br>      <span class="hljs-attr">wpm:</span> <span class="hljs-number">60</span><br><br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-comment"># Number of visits</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 统计数据来源</span><br>      <span class="hljs-comment"># Data Source</span><br>      <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br><br>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span><br>  <span class="hljs-comment"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span><br>  <span class="hljs-attr">updated:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-comment"># ISO-8601 date format</span><br>    <span class="hljs-comment"># See: &lt;http://momentjs.cn/docs/#/parsing/string-format/&gt;</span><br>    <span class="hljs-attr">date_format:</span> <span class="hljs-string">&quot;LL a&quot;</span><br><br>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span><br>    <span class="hljs-comment"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span><br>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 提示标签类型</span><br>    <span class="hljs-comment"># Note class</span><br>    <span class="hljs-comment"># Options: default | primary | info | success | warning | danger | light</span><br>    <span class="hljs-attr">note_class:</span> <span class="hljs-string">info</span><br><br>  <span class="hljs-comment"># 侧边栏展示当前分类下的文章</span><br>  <span class="hljs-comment"># Sidebar of category</span><br>  <span class="hljs-attr">category_bar:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [&quot;分类A&quot;]` 来指定分类</span><br>    <span class="hljs-comment"># If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [&quot;CategoryA&quot;]` to specify categories</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧</span><br>    <span class="hljs-comment"># place in the board</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span><br><br>    <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>    <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span><br>    <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>    <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;title&quot;</span><br><br>    <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>    <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span><br>    <span class="hljs-attr">post_limit:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 侧边栏展示文章目录</span><br>  <span class="hljs-comment"># Table of contents (TOC) in the sidebar</span><br>  <span class="hljs-attr">toc:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧</span><br>    <span class="hljs-comment"># place in the board</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">right</span><br><br>    <span class="hljs-comment"># 目录会选择这些节点作为标题</span><br>    <span class="hljs-comment"># TOC will select these nodes as headings</span><br>    <span class="hljs-attr">headingSelector:</span> <span class="hljs-string">&quot;h1,h2,h3,h4,h5,h6&quot;</span><br><br>    <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span><br>    <span class="hljs-comment"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span><br>    <span class="hljs-attr">collapseDepth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 版权声明，会显示在每篇文章的结尾</span><br>  <span class="hljs-comment"># Copyright, will be displayed at the end of each post</span><br>  <span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># CreativeCommons license</span><br>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY&#x27;</span><br><br>    <span class="hljs-comment"># 显示作者</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 显示发布日期</span><br>    <span class="hljs-comment"># Show post date</span><br>    <span class="hljs-attr">post_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>    <span class="hljs-comment"># 显示更新日期</span><br>    <span class="hljs-comment"># Show update date</span><br>    <span class="hljs-attr">update_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>  <span class="hljs-comment"># 文章底部上一篇下一篇功能</span><br>  <span class="hljs-comment"># Link to previous/next post</span><br>  <span class="hljs-attr">prev_next:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章图片标题</span><br>  <span class="hljs-comment"># Image caption</span><br>  <span class="hljs-attr">image_caption:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章图片可点击放大</span><br>  <span class="hljs-comment"># Zoom feature of images</span><br>  <span class="hljs-attr">image_zoom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 [&#x27;-slim&#x27;, &#x27;&#x27;] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 [&#x27;re:\\\\d&#123;3,4&#125;\\\\/\\\\d&#123;3,4&#125;\\\\/&#x27;, &#x27;&#x27;]</span><br>    <span class="hljs-comment"># The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: [&#x27;-slim&#x27;, &#x27;&#x27;] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: [&#x27;re:\\\\d&#123;3,4&#125;\\\\/\\\\d&#123;3,4&#125;\\\\/&#x27;,&#x27;&#x27;]</span><br>    <span class="hljs-attr">img_url_replace:</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br><br>  <span class="hljs-comment"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span><br>  <span class="hljs-comment"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 脚注的节标题，也可以在 front-matter 中通过 `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` 这种形式修改单独页面的 header</span><br>    <span class="hljs-comment"># The section title of the footnote, you can also modify the header of a single page in the form of `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` in front-matter</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：&lt;https://hexo.fluid-dev.com/docs/guide/##latex-数学公式&gt;</span><br>  <span class="hljs-comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: &lt;https://hexo.fluid-dev.com/docs/en/guide/#math&gt;</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span><br>    <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># Options: mathjax | katex</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br><br>  <span class="hljs-comment"># 流程图，基于 mermaid-js，具体请见：&lt;https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图&gt;</span><br>  <span class="hljs-comment"># Flow chart, based on mermaid-js, see: &lt;https://hexo.fluid-dev.com/docs/en/guide/#mermaid&gt;</span><br>  <span class="hljs-attr">mermaid:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span><br>    <span class="hljs-comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># See: &lt;http://mermaid-js.github.io/mermaid/&gt;</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;default&#x27;</span> &#125;<br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: &lt;https://utteranc.es&gt;</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br><br><span class="hljs-comment"># Disqus</span><br><span class="hljs-comment"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span><br><span class="hljs-comment"># Based on third-party service</span><br><span class="hljs-comment"># See: &lt;https://disqus.com&gt;</span><br><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">shortname:</span><br>  <span class="hljs-comment"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span><br>  <span class="hljs-comment"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span><br>  <span class="hljs-comment"># See: &lt;https://github.com/SukkaW/DisqusJS&gt;</span><br>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">apikey:</span><br><br><span class="hljs-comment"># Gitalk</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: &lt;https://github.com/gitalk/gitalk#options&gt;</span><br><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span><br>  <span class="hljs-attr">clientSecret:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">owner:</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;name&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 默认 proxy 可能会失效，解决方法请见下方链接</span><br>  <span class="hljs-comment"># The default proxy may be invalid, refer to the links for solutions</span><br>  <span class="hljs-comment"># &lt;https://github.com/gitalk/gitalk/issues/429&gt;</span><br>  <span class="hljs-comment"># &lt;https://github.com/Zibri/cloudflare-cors-anywhere&gt;</span><br>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">&lt;https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token&gt;</span><br><br><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: &lt;https://valine.js.org/&gt;</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span><br>  <span class="hljs-attr">appKey:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiCDN:</span><br>  <span class="hljs-attr">emojiMaps:</span><br>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Waline</span><br><span class="hljs-comment"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span><br><span class="hljs-comment"># Derived from Valine, with self-hosted service and new features</span><br><span class="hljs-comment"># See: &lt;https://waline.js.org/&gt;</span><br><span class="hljs-attr">waline:</span><br>  <span class="hljs-attr">serverURL:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredMeta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>]<br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">emoji:</span> [<span class="hljs-string">&#x27;&lt;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&gt;&#x27;</span>]<br>  <span class="hljs-attr">dark:</span> <span class="hljs-string">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span><br>  <span class="hljs-attr">wordLimit:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 畅言 Changyan</span><br><span class="hljs-comment"># 基于第三方的服务</span><br><span class="hljs-comment"># Based on third-party service, insufficient support for regions outside China</span><br><span class="hljs-comment"># &lt;http://changyan.kuaizhan.com&gt;</span><br><span class="hljs-attr">changyan:</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 来必力 Livere</span><br><span class="hljs-comment"># 基于第三方的服务</span><br><span class="hljs-comment"># Based on third-party service</span><br><span class="hljs-comment"># See: &lt;https://www.livere.com&gt;</span><br><span class="hljs-attr">livere:</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># Remark42</span><br><span class="hljs-comment"># 需要自托管服务端</span><br><span class="hljs-comment"># Based on self-hosted service</span><br><span class="hljs-comment"># See: &lt;https://remark42.com&gt;</span><br><span class="hljs-attr">remark42:</span><br>  <span class="hljs-attr">host:</span><br>  <span class="hljs-attr">site_id:</span><br>  <span class="hljs-attr">max_shown_comments:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">locale:</span> <span class="hljs-string">zh</span><br>  <span class="hljs-attr">components:</span> [<span class="hljs-string">&#x27;embed&#x27;</span>]<br><br><span class="hljs-comment"># Twikoo</span><br><span class="hljs-comment"># 基于腾讯云开发</span><br><span class="hljs-comment"># Based on Tencent CloudBase</span><br><span class="hljs-comment"># See: &lt;https://twikoo.js.org&gt;</span><br><span class="hljs-attr">twikoo:</span><br>  <span class="hljs-attr">envId:</span><br>  <span class="hljs-attr">region:</span> <span class="hljs-string">ap-shanghai</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br><br><span class="hljs-comment"># Cusdis</span><br><span class="hljs-comment"># 基于第三方服务或自托管服务</span><br><span class="hljs-comment"># Based on third-party or self-hosted service</span><br><span class="hljs-comment"># See &lt;https://cusdis.com&gt;</span><br><span class="hljs-attr">cusdis:</span><br>  <span class="hljs-attr">host:</span><br>  <span class="hljs-attr">app_id:</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-cn</span><br><br><span class="hljs-comment"># Giscus</span><br><span class="hljs-comment"># 基于 GitHub Discussions，类似于 Utterances</span><br><span class="hljs-comment"># Based on GitHub Discussions, similar to Utterances</span><br><span class="hljs-comment"># See: &lt;https://giscus.app/&gt;</span><br><span class="hljs-attr">giscus:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">repo-id:</span><br>  <span class="hljs-attr">category:</span><br>  <span class="hljs-attr">category-id:</span><br>  <span class="hljs-attr">theme-light:</span> <span class="hljs-string">light</span><br>  <span class="hljs-attr">theme-dark:</span> <span class="hljs-string">dark</span><br>  <span class="hljs-attr">mapping:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">reactions-enabled:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">emit-metadata:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">input-position:</span> <span class="hljs-string">top</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 归档页</span><br><span class="hljs-comment"># Archive Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 分类页</span><br><span class="hljs-comment"># Category Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Sort field for categories, with a minus sign is reverse order</span><br>  <span class="hljs-comment"># Options: length | name</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">&quot;-length&quot;</span><br><br>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span><br>  <span class="hljs-comment"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span><br>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span><br>  <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>  <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;-date&quot;</span><br><br>  <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>  <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span><br>  <span class="hljs-attr">post_limit:</span> <span class="hljs-number">10</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 标签页</span><br><span class="hljs-comment"># Tag Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">tagcloud:</span><br>    <span class="hljs-attr">min_font:</span> <span class="hljs-number">15</span><br>    <span class="hljs-attr">max_font:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">unit:</span> <span class="hljs-string">px</span><br>    <span class="hljs-attr">start_color:</span> <span class="hljs-string">&quot;#BBBBEE&quot;</span><br>    <span class="hljs-attr">end_color:</span> <span class="hljs-string">&quot;#337ab7&quot;</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 关于页</span><br><span class="hljs-comment"># About Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Fluid&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span><br>  <span class="hljs-comment"># 更多图标可从 &lt;https://hexo.fluid-dev.com/docs/icon/&gt; 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span><br>  <span class="hljs-comment"># More icons can be found from &lt;https://hexo.fluid-dev.com/docs/en/icon/&gt;  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&lt;https://github.com&gt;&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-douban-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&lt;https://douban.com&gt;&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;豆瓣&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span> &#125;<br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 自定义页</span><br><span class="hljs-comment"># Custom Page</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 通过 hexo new page 命令创建的页面</span><br><span class="hljs-comment"># Custom Page through `hexo new page`</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 404页</span><br><span class="hljs-comment"># 404 Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page404:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">85</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-comment"># 重定向到首页的延迟(毫秒)</span><br>  <span class="hljs-comment"># Delay in redirecting to home page (milliseconds)</span><br>  <span class="hljs-attr">redirect_delay:</span> <span class="hljs-number">5000</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 友链页</span><br><span class="hljs-comment"># Links Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-comment"># 友链的成员项</span><br>  <span class="hljs-comment"># Member item of page</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Blog&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题博客&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&lt;https://hexo.fluid-dev.com/&gt;&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Docs&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题使用指南&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&lt;https://hexo.fluid-dev.com/docs/&gt;&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Repo&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题 GitHub 仓库&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&lt;https://github.com/fluid-dev/hexo-theme-fluid&gt;&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br><br>  <span class="hljs-comment"># 当成员头像加载失败时，替换为指定图片</span><br>  <span class="hljs-comment"># When the member avatar fails to load, replace the specified image</span><br>  <span class="hljs-attr">onerror_avatar:</span> <span class="hljs-string">/img/avatar.png</span><br><br>  <span class="hljs-comment"># 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字</span><br>  <span class="hljs-comment"># Custom content at the bottom of the links</span><br>  <span class="hljs-attr">custom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&lt;hr&gt;&lt;p&gt;在下方留言申请加入我的友链，按如下格式提供信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;博客名：Fluid&lt;/li&gt;&lt;li&gt;简介：Fluid 主题官方博客&lt;/li&gt;&lt;li&gt;链接：&lt;https://hexo.fluid-dev.com&gt;&lt;/li&gt;&lt;li&gt;图片：&lt;https://hexo.fluid-dev.com/img/favicon.png&gt;&lt;/li&gt;&lt;/ul&gt;&#x27;</span><br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，</span><br><span class="hljs-comment"># 如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，</span><br><span class="hljs-comment"># ** 如果你不知道如何设置，请不要做任何改动 **</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.</span><br><span class="hljs-comment"># Be aware that you would better use the same version as default ones to avoid potential problems.</span><br><span class="hljs-comment"># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-attr">static_prefix:</span><br>  <span class="hljs-comment"># 内部静态</span><br>  <span class="hljs-comment"># Internal static</span><br>  <span class="hljs-attr">internal_js:</span> <span class="hljs-string">/js</span><br>  <span class="hljs-attr">internal_css:</span> <span class="hljs-string">/css</span><br>  <span class="hljs-attr">internal_img:</span> <span class="hljs-string">/img</span><br><br>  <span class="hljs-attr">anchor:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/anchor-js/4.3.1/&gt;</span><br><br>  <span class="hljs-attr">github_markdown:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/github-markdown-css/4.0.0/&gt;</span><br><br>  <span class="hljs-attr">jquery:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/jquery/3.6.0/&gt;</span><br><br>  <span class="hljs-attr">bootstrap:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/twitter-bootstrap/4.6.1/&gt;</span><br><br>  <span class="hljs-attr">prismjs:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/prism/1.29.0/&gt;</span><br><br>  <span class="hljs-attr">tocbot:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/tocbot/4.18.2/&gt;</span><br><br>  <span class="hljs-attr">typed:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/typed.js/2.0.12/&gt;</span><br><br>  <span class="hljs-attr">fancybox:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/fancybox/3.5.7/&gt;</span><br><br>  <span class="hljs-attr">nprogress:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/nprogress/0.2.0/&gt;</span><br><br>  <span class="hljs-attr">mathjax:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/mathjax/3.2.2/&gt;</span><br><br>  <span class="hljs-attr">katex:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/KaTeX/0.16.2/&gt;</span><br><br>  <span class="hljs-attr">busuanzi:</span> <span class="hljs-string">&lt;https://busuanzi.ibruce.info/busuanzi/2.3/&gt;</span><br><br>  <span class="hljs-attr">clipboard:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/clipboard.js/2.0.11/&gt;</span><br><br>  <span class="hljs-attr">mermaid:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/mermaid/8.14.0/&gt;</span><br><br>  <span class="hljs-attr">valine:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/valine/1.5.1/&gt;</span><br><br>  <span class="hljs-attr">waline:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/waline/2.14.1/&gt;</span><br><br>  <span class="hljs-attr">gitalk:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/gitalk/1.8.0/&gt;</span><br><br>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/disqusjs/1.3.0/&gt;</span><br><br>  <span class="hljs-attr">twikoo:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/twikoo/1.6.8/&gt;</span><br><br>  <span class="hljs-attr">hint:</span> <span class="hljs-string">&lt;https://lib.baomitu.com/hint.css/2.7.0/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-创建【关于页】"><a href="#2-创建【关于页】" class="headerlink" title="2.创建【关于页】"></a>2.创建【关于页】</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下的<code>/source/about/index.md</code>，添加 <code>layout</code>属性。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">hexo g -d <br>hexo s<br></code></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/btrhpb.png" alt="image-20230316070056912"></p><h2 id="五、创建文章"><a href="#五、创建文章" class="headerlink" title="五、创建文章"></a>五、创建文章</h2><blockquote><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行如下命令创建一篇新文章，名为《测试文章》</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 测试文章<br></code></pre></td></tr></table></figure><p>执行完成后在<code>source\\_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)</p><p>在资源目录<code>测试文章</code>中放一张图片 <code>test.png</code></p><p><img src="https://p.ipic.vip/p1fuv1.png" alt="image-20230316070132877"></p><p>在<code>测试文章.md</code>中添加内容如下，演示了图片的三种引用方式。第一种为官方推荐用法，第二种为markdown语法，第三种和前两种图片存放位置不一样，是将图片放在<code>\\source\\images</code>目录下。这三种写法在md文件中图片是无法显示的，但是在页面上能正常显示。</p><p>图片的引入方式可参考官方文档 <a href="https://hexo.io/zh-cn/docs/asset-folders.html%EF%BC%8C%E6%9C%89%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E3%80%82">https://hexo.io/zh-cn/docs/asset-folders.html，有详细介绍。</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 测试文章<br>date: 2021-06-10 16:35:20<br>tags:<br><span class="hljs-bullet">-</span> 原创<br>categories:<br><span class="hljs-section">- Java</span><br><span class="hljs-section">---</span><br><br>这是一篇测试文章<br><br>&#123;% asset<span class="hljs-emphasis">_img test.png 图片引用方法一 %&#125;</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">![<span class="hljs-string">图片引用方法二</span>](<span class="hljs-link">test.png</span>)</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">![<span class="hljs-string">图片引用方法三</span>](<span class="hljs-link">/images/test.png</span>)</span><br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><h2 id="六、个性化功能配置"><a href="#六、个性化功能配置" class="headerlink" title="六、个性化功能配置"></a>六、个性化功能配置</h2><h3 id="1-修改浏览器tab页名称"><a href="#1-修改浏览器tab页名称" class="headerlink" title="1.修改浏览器tab页名称"></a>1.修改浏览器tab页名称</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 修改根目录下_config.yml中的title字段</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;gcoder blog&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-修改博客标题"><a href="#2-修改博客标题" class="headerlink" title="2.修改博客标题"></a>2.修改博客标题</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 修改根目录下_config.fluid.yml中的blog_title字段</span><br><span class="hljs-attr">blog_title:</span> <span class="hljs-string">&#x27;gcoder blog&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-修改博客主页正中间的文字"><a href="#3-修改博客主页正中间的文字" class="headerlink" title="3.修改博客主页正中间的文字"></a>3.修改博客主页正中间的文字</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 修改根目录下_config.fluid.yml中的text字段</span><br><span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;开心编码&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-配置文章模板"><a href="#4-配置文章模板" class="headerlink" title="4.配置文章模板"></a>4.配置文章模板</h3><p>配置模板是为了把一些文章固定的参数给确定下来，避免每次文章都要重复的设置，模板存放在scaffolds文件夹下面，有三个md文件，就是我们的模板。根据以上的插件，以及主题文件，我将post.md和draft.md都修改成了以下内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>tags:<br>categories:<br>excerpt: # 文章的摘要<br>toc: true  # 是否开启目录，还要配合theme的配置一起使用<br>cover:  # cover图片<br>updated:  # 最后更新时间<br><span class="hljs-section">password:  # 访问时需要的密码</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><h3 id="5-添加阅读量统计"><a href="#5-添加阅读量统计" class="headerlink" title="5.添加阅读量统计"></a>5.添加阅读量统计</h3><p><code>Fluid</code>主题写好了统计阅读量的代码，但是缺少相应配置所以没有开启，需要借助三方服务来统计阅读量，这里是有 <code>Leancloud</code>的免费服务来进行统计。</p><p><em><strong>*1. 申请LeanCloud账号并创建应用*</strong></em></p><p>进入 <a href="https://console.leancloud.cn/">官网</a>注册账号</p><p><img src="https://p.ipic.vip/qt9j92.png" alt="image-20230316070203756"></p><p>需实名认证，完成后才能使用各项服务</p><p><img src="https://p.ipic.vip/kvha0b.png" alt="image-20230316070229882"></p><p>验证邮箱</p><p><img src="https://p.ipic.vip/wrcxna.png" alt="image-20230316070253329"></p><p>创建应用，选择<code>开发版</code>即可，免费的</p><p><img src="https://p.ipic.vip/ffu2qc.png" alt="image-20230316070308378"></p><p>进入该应用的 <code>设置-&gt;应用凭证</code>，找到 <code>AppID</code>和 <code>AppKey</code>，记录下来后面配置要用</p><p><img src="https://p.ipic.vip/prbkq3.png" alt="image-20230316070323776"></p><p><em><strong>*2. 修改Fluid配置*</strong></em></p><p>修改根目录下_config.fluid.yml中的配置</p><ol><li><p><em><strong>*单篇文章阅读量计数*</strong></em></p><p>打开统计开关</p><p><img src="https://p.ipic.vip/ekya43.png" alt="image-20230316070354583"></p><p>配置 <code>leancloud</code>的 <code>app_id</code>和 <code>app_key</code></p><p><img src="https://p.ipic.vip/65i574.png" alt="image-20230316070408837"></p><p>打开计数功能，统计来源改为 <code>leancloud</code></p><p><img src="https://p.ipic.vip/b4xm4x.png" alt="image-20230316070427032"></p><p>页面效果</p><p><img src="https://p.ipic.vip/2buoq1.png" alt="image-20230316070440323"></p></li><li><p><em><strong>*页面底部展示网站的 PV、UV 统计数*</strong></em></p><p><img src="https://p.ipic.vip/nmv6jx.png" alt="image-20230316070458998"></p><p>页面效果</p><p><img src="https://p.ipic.vip/yay5xh.png" alt="image-20230316070510832"></p></li></ol><h3 id="6-添加评论功能"><a href="#6-添加评论功能" class="headerlink" title="6.*添加评论功能*"></a>6.<em><strong>*添加评论功能*</strong></em></h3><p>评论功能的代码已经写好了，只不过没有开启，需要修改一些配置.</p><p>修改博客目录下_config.fluid.yml的配置文件</p><ol><li><p>启用评论插件</p><p><img src="https://p.ipic.vip/7ywctf.png" alt="image-20230316070525251"></p></li><li><p>配置<code>LeanCloud</code>的 <code>appId</code>和 <code>appkey</code></p><p><img src="https://p.ipic.vip/9468vq.png" alt="image-20230316070539273"></p></li><li><p>重新部署后，查看页面效果，评论功能已开启</p><p><img src="https://p.ipic.vip/dd23ha.png" alt="image-20230316070552652"></p></li></ol><h2 id="七、发布到github（可选）"><a href="#七、发布到github（可选）" class="headerlink" title="七、发布到github（可选）"></a>七、发布到github（可选）</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>安装hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改根目录下的 <code>_config.yml</code>，配置 <code>GitHub</code>相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span><br>    <span class="hljs-attr">github:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&lt;https://github.com/aaaa/bbb.git&gt;</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>      <span class="hljs-attr">token:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>其中 <code>token</code>为 <code>GitHub</code>的 <code>Personal access tokens</code>，获取方式如下图</p><p><img src="https://p.ipic.vip/s6uwt0.png" alt="image-20230316070655190"></p><p>部署到GitHub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d <br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="https://gcoder.github.io/%EF%BC%8C%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F">https://gcoder.github.io/，部署成功</a></p><p><img src="https://p.ipic.vip/9me7zf.png" alt="image-20230316070711419"></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>直接将 <code>public</code>目录中的文件和目录推送至 <code>GitHub</code>仓库和分支中。</p><p><img src="https://p.ipic.vip/y1sjsb.png" alt="image-20230316070749773"></p><h2 id="八、发布到自己服务器，Nginx代理（可选）"><a href="#八、发布到自己服务器，Nginx代理（可选）" class="headerlink" title="八、发布到自己服务器，Nginx代理（可选）"></a>八、发布到自己服务器，Nginx代理（可选）</h2><p>如果自己有服务器的话，也可以不使用 GitHub Pages，直接部署的自己的服务器上，通过 Nginx 进行代理，我这里有一个阿里云上的 CentOS 7 版的 Linux 服务器，演示下如何部署，步骤如下。</p><p>打开 hexo-blog 根目录下的 _config.yml，增加如下配置，这是因为把网站存放在了子目录中，要和 Nginx 配置中的 location &#x2F;blog 路径一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">root: /blog<br></code></pre></td></tr></table></figure><p><code>hexo-blog</code>根目录下执行打包命令，打包好的文件在 <code>public</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>将<code>public</code>目录下的文件复制到 <code>Linux</code>服务器上的某个目录下，我的存放目录为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/rkyao/fronted/hexo-blog<br></code></pre></td></tr></table></figure><p>修改 <code>Nginx</code>配置文件，我的 <code>Nginx</code>安装路径为 <code>/usr/local</code>，大家根据自己实际情况调整</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/nginx/conf<br>vim nginx.conf<br><span class="hljs-comment"># server节点下添加如下配置</span><br>location /blog &#123;<br>    <span class="hljs-built_in">alias</span>  /opt/rkyao/fronted/hexo-blog;<br>    index  index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启 <code>Nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/nginx/sbin<br>./nginx -s reload<br></code></pre></td></tr></table></figure><p>访问博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;http://ip/blog/&gt;<br></code></pre></td></tr></table></figure><h2 id="九、绑定域名-域名厂商namesilo-DNS解析cloudflare"><a href="#九、绑定域名-域名厂商namesilo-DNS解析cloudflare" class="headerlink" title="九、绑定域名(域名厂商namesilo+DNS解析cloudflare)"></a>九、绑定域名(域名厂商namesilo+DNS解析cloudflare)</h2><p>这块内容因为在我最早的搭建博客搞的了，没有记录文档。等找天有时间了我再补充下～</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>以下为参考文章，如有侵权，请联系删除！</p><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><p><a href="https://ayase.moe/2023/02/12/deploy-hexo-in-2023/">https://ayase.moe/2023/02/12/deploy-hexo-in-2023/</a></p>]]></content>
    
    
    <summary type="html">我是如何搭建这个博客的呢～</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="博客" scheme="https://gcoder5.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>大数据原理与技术摘要学习</title>
    <link href="https://gcoder5.com/2023/03/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%91%98%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://gcoder5.com/2023/03/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%91%98%E8%A6%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-03-12T10:57:58.000Z</published>
    <updated>2023-03-12T13:46:37.009Z</updated>
    
    <content type="html"><![CDATA[<p>最近买了本书，叫做《大数据原理和技术》，是华为HCIA认证的必学课本，所以就买了学习下，顺便将书中的内容做下记录，供自己日后温故知新。</p><h3 id="大数据概述"><a href="#大数据概述" class="headerlink" title="大数据概述"></a>大数据概述</h3><h4 id="1-大数据的基本概念"><a href="#1-大数据的基本概念" class="headerlink" title="1.大数据的基本概念"></a>1.大数据的基本概念</h4><blockquote><p>大数据是指需要用高效率和创新型的信息技术加以处理，以提升洞察能力、决策能力和优化流程能力的信息资产。—Cartner</p></blockquote><blockquote><p>大数据是指超出传统软件工具的采集、存储、管理和分析等能力的数据集，具有<strong>海量的数据</strong>（<code>Volume</code>）、<strong>快速的数据产生与处理</strong>（<code>Velocity</code>）</p><p>、<strong>多样的数据类型</strong>（<code>Variety</code>）和<strong>低价值密度</strong>（<code>Value</code>）四大特征，简称<code>4V</code>特征。—麦肯锡</p></blockquote><ol><li><p>海量的数据</p><ul><li>信息时代，数据量的增长速度急剧加快</li><li>物联网领域引领新一轮信息化革命，人类进入<code>信息爆炸</code>时代</li></ul></li><li><p>快速的数据产生与处理</p><p><span style="color:red">大数据可以通过对海量数据进行实时分析，快速得出处理结果，从而保证处理结果的时效性。</span></p><ul><li>IDC预测，到2025年，全球年新增数据量将达到175ZB</li><li>数据量的急剧增长导致企业对数据处理效率的要求越来越高</li><li>某些应用需要数秒内对海量数据进行计算和分析，并给出计算结果，否则得到的处理结果就是过时和无效的</li></ul></li><li><p>多样的数据类型</p><ul><li>我们可以将数据类型简单的划分成：<strong>结构化数据</strong>、<strong>半结构化数据</strong>和<strong>非结构化数据</strong><ul><li>结构化数据：存储在关系数据库（如<code>MSSQL</code>、<code>Oracle</code>、<code>MySQL</code>）中的数据</li><li>非结构化数据：不方便用关系数据库二维逻辑表来表现的数据（图片、音频、视频、模型、连接信息、文档、位置信息、网络日志等）。非结构化数据类型越来越多，对于多类型的数据的处理能力提出了更高的要求</li><li>半结构化数据：具有一定的结构性，但数据的结构和内容混在一起，没有明显的区分（OEM是典型的半结构化数据模型）</li></ul></li></ul></li><li><p>低价值密度</p><ul><li>价值密度低是大数据的典型特征</li><li>大数据时代选取数据的理念是选择全体而非样本，会将所有数据纳入处理氛围</li><li>这些数据单独被拿出来，彼此之间相关性很低，只有从宏观角度对数据分析，才能获取有价值的结果</li></ul></li></ol><h4 id="2-大数据的来源"><a href="#2-大数据的来源" class="headerlink" title="2.大数据的来源"></a>2.大数据的来源</h4>]]></content>
    
    
    <summary type="html">华为HCIA认证学习的书籍《大数据原理和技术》</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="大数据" scheme="https://gcoder5.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>说说这些年用的docker</title>
    <link href="https://gcoder5.com/2023/03/12/%E8%AF%B4%E8%AF%B4%E8%BF%99%E4%BA%9B%E5%B9%B4%E7%94%A8%E7%9A%84docker/"/>
    <id>https://gcoder5.com/2023/03/12/%E8%AF%B4%E8%AF%B4%E8%BF%99%E4%BA%9B%E5%B9%B4%E7%94%A8%E7%9A%84docker/</id>
    <published>2023-03-11T23:38:24.000Z</published>
    <updated>2023-03-12T09:09:34.985Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说，近些年的容器技术得到了大面积的推广和使用，而在这几年中，我也略有使用，所以本文想记录下近些年在使用docker上的一些使用心得和使用经验。</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>每个工具的使用第一步都是安装，我们也不例外。</p><p><code>Centos7</code>为例</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><code>Docker</code> 支持 64 位版本 <code>CentOS 7/8</code>，并且要求内核版本不低于<code> 3.10</code>，如果内核版本不满足的，请升级内核。</p><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine<br></code></pre></td></tr></table></figure><h4 id="更换yum国内源"><a href="#更换yum国内源" class="headerlink" title="更换yum国内源"></a>更换yum国内源</h4><ol><li><p>安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y yum-utils<br></code></pre></td></tr></table></figure></li><li><p>添加<code>yum</code>软件源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><br>sudo sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">官方源</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo yum-config-manager \</span><br><span class="language-bash"><span class="hljs-comment">#     --add-repo \</span></span><br><span class="language-bash"><span class="hljs-comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></code></pre></td></tr></table></figure></li><li><p>需要测试版本的Docker请执行以下命令（可选）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum-config-manager --enable docker-ce-test<br></code></pre></td></tr></table></figure></li></ol><h4 id="使用yum安装docker"><a href="#使用yum安装docker" class="headerlink" title="使用yum安装docker"></a>使用yum安装docker</h4><ol><li><p>更新yum</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum update<br></code></pre></td></tr></table></figure></li><li><p>安装docker-ce</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure></li></ol><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable docker<br>sudo systemctl start docker<br></code></pre></td></tr></table></figure><h4 id="让普通用户也可以使用docker"><a href="#让普通用户也可以使用docker" class="headerlink" title="让普通用户也可以使用docker"></a>让普通用户也可以使用docker</h4><blockquote><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p></blockquote><ol><li><p>将当前用户加入到docker组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-variable">$USER</span> 当前用户</span><br>sudo usermod -aG docker $USER<br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo gpasswd -a <span class="hljs-variable">$USER</span>  docker</span><br></code></pre></td></tr></table></figure></li><li><p>重启</p><p>重启后生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure></li></ol><h3 id="安装可视化工具portainer"><a href="#安装可视化工具portainer" class="headerlink" title="安装可视化工具portainer"></a>安装可视化工具<code>portainer</code></h3><p>安装好了<code>docker</code>之后，我们可以通过各种命令来愉快的进行操作，同时呢，我们也可以借助可视化工具来对多个docker进行管理，方便我们查看日志，或者管理容器。</p><p>在可视化工具这一块，我经常使用的是<code>portainer</code>，所以接下来就展示下如何安装及使用该工具。</p><h4 id="安装portainer"><a href="#安装portainer" class="headerlink" title="安装portainer"></a>安装<code>portainer</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查找portainer</span><br>docker search portainer<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取portainer</span><br>docker pull portainer/portainer<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1.创建挂载文件</span><br>mkdir -p /home/data/docker/portainer/data<br>chmod 777 -R /home/data/docker/portainer/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.启动</span><br>docker run -d \<br>-p 19000:9000 \<br>-p 18000:8000 \<br>--restart=always --privileged=true \<br>-v /var/run/docker.sock:/var/run/docker.sock \<br>-v /home/parallels/docker/portainer/data:/data \<br>--name portainer portainer/portainer<br></code></pre></td></tr></table></figure><h4 id="访问portainer"><a href="#访问portainer" class="headerlink" title="访问portainer"></a>访问<code>portainer</code></h4><p>在随便一个浏览器访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">http://localhost:19000<br></code></pre></td></tr></table></figure><p><span style="color:blue"><strong>初次访问会需要设置一个用户密码！</strong></span></p><p><img src="https://p.ipic.vip/1f3wyn.png" alt="image-20230312082729288"></p><p>登录之后，我们可以看到如上的一个界面，具体的使用细节我就不再赘述了，相信小伙伴们安装到了这步之后，就知道如何去使用了～</p><h4 id="通过portainer连接多个docker"><a href="#通过portainer连接多个docker" class="headerlink" title="通过portainer连接多个docker"></a>通过<code>portainer</code>连接多个<code>docker</code></h4><p>我们上面说过，这个工具是可以管理多个docker的，所以接下来我们来介绍下如何接入（以下主要是<code>api</code>的连接方式）</p><ol><li><p>前期准备</p><p>首先，我们需要明确一件事情，就是我们要接入的远程docker服务是已经开放<code>2375</code>端口供外部链接（如没有，可根据如下步骤操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">我们假设远程docker服务叫做A，那么接下来我们需要对A所在的服务器进行操作</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1.修改docker配置文件</span><br>vi /usr/lib/systemd/system/docker.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在ExecStart=/usr/bin/dockerd-current添加配置</span><br>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.防火墙开放端口（如有开启防火墙的话，需要配置）</span><br>firewall-cmd --zone=public --add-port=2375/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure></li><li><p>配置远程docker服务</p><p>添加<code>Environment</code></p><p><img src="https://p.ipic.vip/1psai5.png" alt="image-20230312083859322"></p><p>我这里选择<code>Docker Standalone</code></p><p><img src="https://p.ipic.vip/vbp3rk.png" alt="image-20230312083952874"></p><p>连接方式我们选择<code>api</code>，其他的方式也可以，需要的小伙伴可以自行尝试～</p><p><img src="https://p.ipic.vip/o2u9r8.png" alt="image-20230312084210676"></p><p>到这里，我们就将远程的docker服务添加进来了。</p></li></ol><h3 id="用docker-compose安装redis"><a href="#用docker-compose安装redis" class="headerlink" title="用docker-compose安装redis"></a>用<code>docker-compose</code>安装<code>redis</code></h3><p><code>Compose </code>是用于定义和运行多容器 <code>Docker</code> 应用程序的工具。通过<code> Compose</code>，您可以使用<code> YML</code> 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><p>Compose 使用的三个步骤：</p><ul><li>使用 <code>Dockerfile</code> 定义应用程序的环境。</li><li>使用 <code>docker-compose.yml </code>定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 <code>docker-compose up </code>命令来启动并运行整个应用程序。</li></ul><p>接下来，我们用安装<code>redis</code>来介绍如何使用<code>docker-compose</code>构建我们需要的doker服务</p><h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装<code>docker-compose</code></h4><ol><li><p>下载当前的稳定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>将可执行权限应用于二进制文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>创建软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose version<br></code></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/53l1n0.png" alt="image-20230312094311903"></p><p>至此安装成功。</p></li></ol><h4 id="新建redis相关的目录"><a href="#新建redis相关的目录" class="headerlink" title="新建redis相关的目录"></a>新建redis相关的目录</h4><p>建立这些目录是为了让我们更好的管理和复用</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tex">redis<br>|---compose<br>|---docker-compose.yml      ---compose配置文件<br>|---data                          ---redis数据存储目录（挂载用）<br>|---logs                          ---redis日志文件目录（redis.conf中logfile设置相对路径则不需要）<br>|---redis.conf                    ---redis配置文件<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir redis &amp;&amp; cd redis<br>mkdir compose data logs<br>touch compose/docker-compose.yml<br>touch redis.conf<br></code></pre></td></tr></table></figure><h4 id="编辑redis配置文件"><a href="#编辑redis配置文件" class="headerlink" title="编辑redis配置文件"></a>编辑redis配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi redis.conf<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs conf">#开启远程可连接<br>#bind 127.0.0.1<br>#自定义密码<br>requirepass 12345678<br>#指定 Redis 监听端口(默认:6379) <br>port 6379<br>#客户端闲置指定时长后关闭连接(单位:秒。0:关闭该功能) <br>timeout 0<br># 900s内如果至少一次写操作则执行bgsave进行RDB持久化操作<br>save 900 1<br># 在300s内，如果至少有10个key进行了修改，则进行持久化操作<br>save 300 10<br>#在60s内，如果至少有10000个key进行了修改，则进行持久化操作<br>save 60 10000<br>#是否压缩数据存储(默认:yes。Redis采用LZ 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大<br>rdbcompression yes<br>#指定本地数据文件名(默认:dump.rdb)<br>dbfilename dump.rdb<br>#指定本地数据文件存放目录<br>dir /data<br>#指定日志文件位置(如果是相对路径，redis会将日志存放到指定的dir目录下)<br>logfile &quot;redis.log&quot;<br></code></pre></td></tr></table></figure><h4 id="编辑compose配置文件"><a href="#编辑compose配置文件" class="headerlink" title="编辑compose配置文件"></a>编辑compose配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi compose/docker-compose.yml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">redis:</span><br><span class="hljs-comment"># 指定镜像及版本</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">redis:6.2.6</span><br><span class="hljs-comment"># 指定容器名</span><br><span class="hljs-attr">container_name:</span> <span class="hljs-string">fedora-redis</span><br><span class="hljs-comment"># 是否启动docker，自启动该容器</span><br><span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br><span class="hljs-comment"># 挂载 数据和配置持久化</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-comment"># 宿主机：容器 ro:docker容器对该文件只读，默认是rw可读可写</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">../redis.conf:/etc/redis/redis.conf:ro</span><br><span class="hljs-comment"># 宿主机：容器 数据</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">../data:/data</span><br><span class="hljs-comment"># 宿主机：容器 日志</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">../logs:/logs</span><br><span class="hljs-comment"># docker执行的启动命令</span><br><span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">/etc/redis/redis.conf</span><br><span class="hljs-comment"># 端口映射</span><br><span class="hljs-attr">ports:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">6378</span><span class="hljs-string">:6379</span><br></code></pre></td></tr></table></figure><h4 id="docker-compose启动和关闭"><a href="#docker-compose启动和关闭" class="headerlink" title="docker-compose启动和关闭"></a><code>docker-compose</code>启动和关闭</h4><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd compose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 -d 后台运行</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动日志</span><br>[+] Running 7/7<br> ⠿ redis Pulled                                                                                                                                                           8.9s<br>   ⠿ 6d4a449ac69c Pull complete                                                                                                                                           4.4s<br>   ⠿ 29f18f34ea7f Pull complete                                                                                                                                           4.4s<br>   ⠿ c299869a5d25 Pull complete                                                                                                                                           4.5s<br>   ⠿ 57341d940d28 Pull complete                                                                                                                                           4.7s<br>   ⠿ 05c85b13ec38 Pull complete                                                                                                                                           4.8s<br>   ⠿ 5bc94d737d33 Pull complete <br>[+] Running 2/2<br> ⠿ Network compose_default  Created                                                                                                                                       0.1s<br> ⠿ Container fedora-redis   Started  <br></code></pre></td></tr></table></figure><p>出现如上的日志，那就证明我们的redis服务已经启动完毕了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看进程</span><br>ps -ef |grep redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看端口</span><br>netstat -ntlp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">验证redis是否启动</span><br>docker exec -it fedora-redis redis-cli<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入到redis客户端后，输入密码</span><br>auth 12345678<br></code></pre></td></tr></table></figure><p>查看redis容器的cpu和内存使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stats fedora-redis<br></code></pre></td></tr></table></figure><p>关闭服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">该命令会将容器直接删除</span><br>docker-compose down<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以指定关闭redis服务（容器还在）</span><br>docker-compose stop redis<br></code></pre></td></tr></table></figure><h3 id="用docker-compose安装mysql"><a href="#用docker-compose安装mysql" class="headerlink" title="用docker-compose安装mysql"></a>用<code>docker-compose</code>安装<code>mysql</code></h3><h4 id="新建mysql相关的目录"><a href="#新建mysql相关的目录" class="headerlink" title="新建mysql相关的目录"></a>新建mysql相关的目录</h4><p><span style="color:blue">我们以安装<strong>mysql8.0</strong>为例</span></p><p>建立这些目录是为了让我们更好的管理和复用</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tex">mysql8<br>|---compose<br>|---docker-compose.yml      ---compose配置文件<br>|---data                          ---mysql数据存储目录（挂载用）<br>|---logs                          ---mysql日志文件目录<br>|---conf                          ---mysql配置目录<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir mysql &amp;&amp; cd mysql<br>mkdir compose data logs conf<br>touch compose/docker-compose.yml<br></code></pre></td></tr></table></figure><h4 id="编辑compose配置文件-1"><a href="#编辑compose配置文件-1" class="headerlink" title="编辑compose配置文件"></a>编辑compose配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi compose/docker-compose.yml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql8:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">fedora-mysql8</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../data:/var/lib/mysql</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../logs:/logs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../conf:/etc/mysql/conf.d</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-string">--default-authentication-plugin=mysql_native_password</span><br>      <span class="hljs-string">--character-set-server=utf8mb4</span><br>      <span class="hljs-string">--collation-server=utf8mb4_general_ci</span><br>      <span class="hljs-string">--explicit_defaults_for_timestamp=true</span><br>      <span class="hljs-string">--lower_case_table_names=1</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3307</span><span class="hljs-string">:3306</span><br></code></pre></td></tr></table></figure><h4 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动mysql服务</h4><p><img src="https://p.ipic.vip/exsgcy.png" alt="image-20230312102729438"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看服务日志</span><br>docker logs fedora-mysql8<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">连接mysql（输入密码即可）</span><br>docker exec -it fedora-mysql8 mysql -uroot -p<br></code></pre></td></tr></table></figure><p>进入到mysql客户端即成功。</p><h3 id="用Dockerfile构建服务镜像"><a href="#用Dockerfile构建服务镜像" class="headerlink" title="用Dockerfile构建服务镜像"></a>用<code>Dockerfile</code>构建服务镜像</h3><h4 id="第一种：直接用Dockerfile构建镜像"><a href="#第一种：直接用Dockerfile构建镜像" class="headerlink" title="第一种：直接用Dockerfile构建镜像"></a>第一种：直接用<code>Dockerfile</code>构建镜像</h4><h5 id="准备一个可执行jar（springboot）"><a href="#准备一个可执行jar（springboot）" class="headerlink" title="准备一个可执行jar（springboot）"></a>准备一个可执行jar（springboot）</h5><p>我们用一个简单的springboot可执行jar（<code>docker-jar-demo-0.0.1-SNAPSHOT.jar</code>）作为操作对象，这个jar只有一个get接口<code>/say</code>，返回<code>hello world</code></p><h5 id="创建一个Dockerfile"><a href="#创建一个Dockerfile" class="headerlink" title="创建一个Dockerfile"></a>创建一个<code>Dockerfile</code></h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine<br><span class="hljs-keyword">MAINTAINER</span> gcoder<br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /tmp</span><br><span class="hljs-keyword">ARG</span> JAR_FILE<br><span class="hljs-keyword">COPY</span><span class="language-bash"> <span class="hljs-variable">$&#123;JAR_FILE&#125;</span> app.jar</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;-Xmx10m&quot;</span>,<span class="hljs-string">&quot;-Xms10m&quot;</span>,<span class="hljs-string">&quot;app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><h5 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">没有指定版本 默认是latest</span><br>docker build --build-arg JAR_FILE=./docker-jar-demo-0.0.1-SNAPSHOT.jar -t hello .<br></code></pre></td></tr></table></figure><h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images<br></code></pre></td></tr></table></figure><h4 id="第二种：用maven插件和Dockerfile命令构建镜像"><a href="#第二种：用maven插件和Dockerfile命令构建镜像" class="headerlink" title="第二种：用maven插件和Dockerfile命令构建镜像"></a>第二种：用<code>maven</code>插件和<code>Dockerfile</code>命令构建镜像</h4><h5 id="在pom-xml添加docker插件"><a href="#在pom-xml添加docker插件" class="headerlink" title="在pom.xml添加docker插件"></a>在<code>pom.xml</code>添加<code>docker</code>插件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>$&#123;project.name&#125;:$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">baseImage</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">baseImage</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entryPoint</span>&gt;</span><br>            [&quot;java&quot;,&quot;-jar&quot;,&quot;-Xmx10m&quot;,&quot;-Xms10m&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;]<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">entryPoint</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipDockerBuild</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">skipDockerBuild</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="执行maven构建命令"><a href="#执行maven构建命令" class="headerlink" title="执行maven构建命令"></a>执行<code>maven</code>构建命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn package docker:build<br></code></pre></td></tr></table></figure><h4 id="第三种：用maven插件读取Dockerfile进行构建"><a href="#第三种：用maven插件读取Dockerfile进行构建" class="headerlink" title="第三种：用maven插件读取Dockerfile进行构建"></a>第三种：用<code>maven</code>插件读取<code>Dockerfile</code>进行构建</h4><h5 id="在pom-xml添加docker插件-1"><a href="#在pom-xml添加docker插件-1" class="headerlink" title="在pom.xml添加docker插件"></a>在<code>pom.xml</code>添加<code>docker</code>插件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>$&#123;project.name&#125;:$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/docker<span class="hljs-tag">&lt;/<span class="hljs-name">dockerDirectory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipDockerBuild</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">skipDockerBuild</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="在Dockefile指定路径建立Dockerfile文件"><a href="#在Dockefile指定路径建立Dockerfile文件" class="headerlink" title="在Dockefile指定路径建立Dockerfile文件"></a>在<code>Dockefile</code>指定路径建立<code>Dockerfile</code>文件</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine<br><span class="hljs-keyword">MAINTAINER</span> gcoder<br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> docker-jar-demo-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;-Xmx10m&quot;</span>,<span class="hljs-string">&quot;-Xms10m&quot;</span>,<span class="hljs-string">&quot;app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><h5 id="执行maven构建命令-1"><a href="#执行maven构建命令-1" class="headerlink" title="执行maven构建命令"></a>执行<code>maven</code>构建命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn package docker:build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">容器技术在近些年是比较热门的，也适用于各种技术调研</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="docker" scheme="https://gcoder5.com/tags/docker/"/>
    
    <category term="centos" scheme="https://gcoder5.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Java中的内存泄漏和内存溢出_下</title>
    <link href="https://gcoder5.com/2023/03/06/Java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA_%E4%B8%8B/"/>
    <id>https://gcoder5.com/2023/03/06/Java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA_%E4%B8%8B/</id>
    <published>2023-03-06T01:39:19.000Z</published>
    <updated>2023-03-11T06:18:09.813Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章我们一起学习了内存泄漏，那这一篇就收个尾，把内存溢出的内容讲一讲，提醒自己要记得，也分享给诸位。</p><p>在《Java虚拟机规范》的规定里，除了程序计数器外，虚拟机内存的其他几个运行时区域都有发生 OutOfMemoryError 异常的可能。</p><p><img src="https://p.ipic.vip/o5tmze.jpg" alt="img"></p><h3 id="java-lang-StackOverflowError"><a href="#java-lang-StackOverflowError" class="headerlink" title="java.lang.StackOverflowError"></a>java.lang.StackOverflowError</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StackOverflowErrorDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        test();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; java.lang.StackOverflowError<br>at com.gcoder.memory.StackOverflowErrorDemo.javaKeeper(StackOverflowErrorDemo.java:24)<br></code></pre></td></tr></table></figure><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><ol><li>无限递归循环调用（最常见原因），要时刻注意代码中<strong>是否有了循环调用方法而无法退出的情况</strong></li><li>执行了大量方法，导致线程栈空间耗尽</li><li>方法内声明了海量的局部变量</li><li>native 代码有栈上分配的逻辑，并且要求的内存还不小，比如 java.net.SocketInputStream.read0 会在栈上要求分配一个 64KB 的缓存（64位 Linux）</li></ol><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>修复引发无限递归调用的异常代码， 通过程序抛出的异常堆栈，找出不断重复的代码行，按图索骥，修复无限递归 Bug</li><li>排查是否存在类之间的循环依赖（当两个对象相互引用，在调用toString方法时也会产生这个异常）</li><li>通过 JVM 启动参数<code>-Xss</code>增加线程栈内存空间， 某些正常使用场景需要执行大量方法或包含大量局部变量，这时可以适当地提高线程栈空间限制</li></ol><h3 id="Java-heap-space"><a href="#Java-heap-space" class="headerlink" title="Java heap space"></a>Java heap space</h3><p>首先，我们都知道Java堆是用来存储对象实例的，当我们不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免GC清除这些对象，那么随着对象数量的增加，总容量达到堆的最大容量限制后就会出现内存溢出异常。</p><p>Java堆内存的OOM异常是实际应用中最常见的内存溢出异常。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JVM参数：-Xmx1m</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaHeapSpaceDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] a)</span> &#123;<br>        <span class="hljs-type">int</span>[] i = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[SIZE];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space<br>at com.gcoder.memory.JavaHeapSpaceDemo.main(JavaHeapSpaceDemo.java:22)<br></code></pre></td></tr></table></figure><h4 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h4><ol><li>请求创建一个<strong>超大</strong>对象，通常是一个大数组</li><li>超出预期的访问量&#x2F;数据量，通常是上游系统请求流量飙升，常见于各类促销&#x2F;秒杀活动，可以结合业务流量指标排查是否有尖状峰值</li><li>过度使用终结器（Finalizer），该对象没有立即被 GC</li><li>内存泄漏（Memory Leak），大量对象引用没有释放，JVM 无法对其自动回收，常见于使用了 File 等资源没有回收（资源没有释放）</li></ol><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>针对大部分情况，通常只需要通过 -Xmx 参数调高 JVM 堆内存空间即可。如果仍然没有解决，可以参考以下情况做进一步处理：</p><ol><li>如果是超大对象，可以检查其合理性，比如是否一次性查询了数据库全部结果，而没有做结果数限制</li><li>如果是业务峰值压力，可以考虑添加机器资源，或者做限流降级。</li><li>如果是内存泄漏，需要找到持有的对象，修改代码设计，比如关闭没有释放的连接</li></ol><h3 id="GC-overhead-limit-exceeded"><a href="#GC-overhead-limit-exceeded" class="headerlink" title="GC overhead limit exceeded"></a>GC overhead limit exceeded</h3><p>我们知道JVM 内置了垃圾回收机制GC，所以说我们开发过程中不需要通过手动来进行内存分配和回收，当我们的进程花费98% 以上的时间执行 GC，但只恢复了不到 2% 的内存，且该动作连续重复了 <strong>5</strong> 次，就会抛出 <code>java.lang.OutOfMemoryError:GC overhead limit exceeded </code>错误（俗称：<strong>垃圾回收上头</strong>）。简单地说，就是应用程序已经基本耗尽了所有可用内存， GC 也无法回收。</p><p>假如不抛出 GC overhead limit exceeded 错误，那 GC 清理的那么一丢丢内存很快就会被再次填满，迫使 GC 再次执行，这样恶性循环，CPU 使用率 100%，而 GC 没什么效果。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeylessEntry</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Key</span> &#123;<br>        Integer id;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Key</span><span class="hljs-params">(Integer id)</span> &#123;<br>            <span class="hljs-built_in">this</span>.id = id;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> id.hashCode();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (!m.containsKey(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(i))) &#123;<br>                    m.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(i), <span class="hljs-string">&quot;Number:&quot;</span> + i);<br>                &#125;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;m.size()=&quot;</span> + m.size());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">m.size()=94000<br>m.size()=95000<br>m.size()=96000<br>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: GC overhead limit exceeded<br>at java.util.Arrays.copyOfRange(Arrays.java:3664)<br>at java.lang.String.&lt;init&gt;(String.java:207)<br>at java.lang.StringBuilder.toString(StringBuilder.java:412)<br>at com.gcoder.memory.KeylessEntry.main(KeylessEntry.java:40)<br></code></pre></td></tr></table></figure><h4 id="原因分析-2"><a href="#原因分析-2" class="headerlink" title="原因分析"></a>原因分析</h4><p>从输出结果可以看到，我们的限制 1000 条数据没有起作用，map 容量远超过了 1000，而且最后也出现了我们想要的错误，这是因为类 Key 只重写了 hashCode() 方法，却没有重写 equals() 方法，我们在使用 containsKey() 方法其实就出现了问题，于是就会一直往 HashMap 中添加 Key，直至 GC 都清理不掉。</p><p>执行这个程序的最终错误，和 JVM 配置也会有关系，如果设置的堆内存特别小，会直接报 Java heap space。算是被这个错误截胡了，所以有时，在资源受限的情况下，无法准确预测程序会死于哪种具体的原因。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>添加 JVM 参数<code>-XX:-UseGCOverheadLimit</code> <span style="color:red"><strong>不推荐这么干</strong></span>，没有真正解决问题，只是将异常推迟</li><li>检查项目中是否有大量的死循环或有使用大内存的代码，优化代码</li><li>dump内存分析，检查是否存在内存泄露，如果没有，加大内存</li></ol><h3 id="Direct-buffer-memory"><a href="#Direct-buffer-memory" class="headerlink" title="Direct buffer memory"></a>Direct buffer memory</h3><p>我们使用 NIO 的时候经常需要使用 <code>ByteBuffer</code> 来读取或写入数据，这是一种基于<code> Channel</code>(通道) 和 <code>Buffer</code>(缓冲区)的 I&#x2F;O 方式，它可以使用<code> Native</code> 函数库直接分配堆外内存，然后通过一个存储在 Java 堆里面的 <code>DirectByteBuffer</code> 对象作为这块内存的引用进行操作。这样在一些场景就避免了 Java 堆和 <code>Native </code>中来回复制数据，所以性能会有所提高。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><blockquote><p><strong>ByteBuffer.allocate(capability)</strong> 是分配 JVM 堆内存，属于 GC 管辖范围，需要内存拷贝所以速度相对较慢；</p><p><strong>ByteBuffer.allocateDirect(capability)</strong> 是分配 OS 本地内存，不属于 GC 管辖范围，由于不需要内存拷贝所以速度相对较快；</p></blockquote><p>如果不断分配本地内存，堆内存很少使用，那么 JVM 就不需要执行 GC，DirectByteBuffer 对象就不会被回收，这时虽然堆内存充足，但本地内存可能已经不够用了，就会出现 OOM，本地直接内存溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * VM Options：-Xms10m,-Xmx10m,-XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectBufferMemoryDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;maxDirectMemory is:&quot;</span> + sun.misc.VM.maxDirectMemory() / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> + <span class="hljs-string">&quot;MB&quot;</span>);<br>        <span class="hljs-comment">// ByteBuffer byteBuffer = ByteBuffer.allocate(6 * 1024 * 1024);</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocateDirect(<span class="hljs-number">6</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">maxDirectMemory is:5MB<br>[GC (System.gc()) [PSYoungGen: 2535K-&gt;512K(4608K)] 2535K-&gt;737K(15872K), 0.0007841 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] <br>[Full GC (System.gc()) [PSYoungGen: 512K-&gt;0K(4608K)] [ParOldGen: 225K-&gt;618K(11264K)] 737K-&gt;618K(15872K), [Metaspace: 3248K-&gt;3248K(1056768K)], 0.0022090 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] <br>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Direct buffer memory<br>at java.nio.Bits.reserveMemory(Bits.java:695)<br>at java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:123)<br>at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)<br>at com.gcoder.memory.DirectBufferMemoryDemo.main(DirectBufferMemoryDemo.java:24)<br>Heap<br> PSYoungGen      total 4608K, used 394K [0x00000007bfb00000, 0x00000007c0000000, 0x00000007c0000000)<br>  eden space 4096K, 9% used [0x00000007bfb00000,0x00000007bfb62898,0x00000007bff00000)<br>  from space 512K, 0% used [0x00000007bff00000,0x00000007bff00000,0x00000007bff80000)<br>  to   space 512K, 0% used [0x00000007bff80000,0x00000007bff80000,0x00000007c0000000)<br> ParOldGen       total 11264K, used 618K [0x00000007bf000000, 0x00000007bfb00000, 0x00000007bfb00000)<br>  object space 11264K, 5% used [0x00000007bf000000,0x00000007bf09a928,0x00000007bfb00000)<br> Metaspace       used 3479K, capacity 4496K, committed 4864K, reserved 1056768K<br>  class space    used 377K, capacity 388K, committed 512K, reserved 1048576K<br></code></pre></td></tr></table></figure><h4 id="原因分析-3"><a href="#原因分析-3" class="headerlink" title="原因分析"></a>原因分析</h4><p>最大直接内存，默认是电脑内存的 1&#x2F;4，所以我们设小点，然后使用直接内存超过这个值，就会出现 OOM。</p><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>Java 只能通过 <code>ByteBuffer.allocateDirect </code>方法使用<code> Direct ByteBuffer</code>，因此，可以通过 Arthas 等在线诊断工具拦截该方法进行排查</li><li>检查是否直接或间接使用了 NIO，如 netty，jetty 等</li><li>通过启动参数<code>-XX:MaxDirectMemorySize</code>调整 <code>Direct ByteBuffer </code>的上限值</li><li>检查 JVM 参数是否有<code>-XX:+DisableExplicitGC</code>选项，如果有就去掉，因为该参数会使 <code>System.gc() </code>失效</li><li>检查堆外内存使用代码，确认是否存在内存泄漏；或者通过反射调用<code> sun.misc.Cleaner</code>的<code> clean()</code> 方法来主动释放被 <code>Direct ByteBuffer </code>持有的内存空间</li><li>内存容量确实不足，升级配置</li></ol><h3 id="Unable-to-create-new-native-thread"><a href="#Unable-to-create-new-native-thread" class="headerlink" title="Unable to create new native thread"></a>Unable to create new native thread</h3><p><strong>每个 Java 线程都需要占用一定的内存空间</strong>，当 JVM 向底层操作系统请求创建一个新的 <code>native</code> 线程时，如果没有足够的资源分配就会报此类错误。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NativeThreadMemoryDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(Integer.MAX_VALUE);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: unable to create new native thread<br>at java.lang.Thread.start0(Native Method)<br>at java.lang.Thread.start(Thread.java:719)<br>at com.gcoder.memory.NativeThreadMemoryDemo.main(NativeThreadMemoryDemo.java:27)<br>Error occurred during initialization of VM<br>java.lang.OutOfMemoryError: unable to create new native thread<br></code></pre></td></tr></table></figure><h4 id="原因分析-4"><a href="#原因分析-4" class="headerlink" title="原因分析"></a>原因分析</h4><p><img src="/Java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%EF%BC%88%E4%B8%8B%EF%BC%89/resize,m_fixed,w_1184.png" alt="java 9种常见的OOM场景——原因分析及解决方案_Java教程_05"></p><p>JVM 向 OS 请求创建 <code>native</code> 线程失败，就会抛出 <code>Unableto createnewnativethread</code>，常见的原因包括以下几类:</p><ol><li>线程数超过操作系统最大线程数限制（和平台有关）</li><li>线程数超过 kernel.pid_max（只能重启）</li><li>native 内存不足；该问题发生的常见过程主要包括以下几步：<ol><li>JVM 内部的应用程序请求创建一个新的 Java 线程；</li><li>JVM native 方法代理了该次请求，并向操作系统请求创建一个 native 线程；</li><li>操作系统尝试创建一个新的 native 线程，并为其分配内存；</li><li>如果操作系统的虚拟内存已耗尽，或是受到 32 位进程的地址空间限制，操作系统就会拒绝本次 native 内存分配；</li><li>JVM 将抛出 java.lang.OutOfMemoryError:Unableto createnewnativethread 错误。</li></ol></li></ol><h4 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>想办法降低程序中创建线程的数量，分析应用是否真的需要创建这么多线程（减少线程数）</li><li>如果确实需要创建很多线程，<strong>调高 OS 层面的线程最大数</strong>：执行<code> ulimia-a</code> 查看最大线程数限制，使用<code>ulimit-u xxx</code>调整最大线程数限制</li></ol><h3 id="Metaspace"><a href="#Metaspace" class="headerlink" title="Metaspace"></a>Metaspace</h3><p>JDK 1.8 之前会出现<code> Permgen space</code>，该错误表示永久代（<code>Permanent Generation</code>）已用满，通常是因为加载的 class 数目太多或体积太大。随着 <strong>1.8 中永久代的取消</strong>，就不会出现这种异常了。</p><p>Metaspace 是方法区在 HotSpot 中的实现，它与永久代最大的区别在于，元空间并不在虚拟机内存中而是使用本地内存，但是本地内存也有打满的时候，所以也会有异常。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JVM Options: -XX:MetaspaceSize=1m -XX:MaxMetaspaceSize=1m</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.setSuperclass(MetaspaceOOMDemo.class);<br>        enhancer.setUseCache(<span class="hljs-literal">false</span>);<br>        enhancer.setCallback((MethodInterceptor) (o, method, objects, methodProxy) -&gt; &#123;<br>            <span class="hljs-comment">//动态代理创建对象</span><br>            <span class="hljs-keyword">return</span> methodProxy.invokeSuper(o, objects);<br>        &#125;);<br>        enhancer.create();<br>    &#125;<br></code></pre></td></tr></table></figure><p>借助 Spring 的 GCLib 实现动态创建对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">可能是因为我的环境是jdk8 所以没有复现</span><br>Error occurred during initialization of VM<br>MaxMetaspaceSize is too small.<br></code></pre></td></tr></table></figure><h4 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h4><p>方法区溢出也是一种常见的内存溢出异常，在经常运行时生成大量动态类的应用场景中，就应该特别关注这些类的回收情况。这类场景除了上边的 GCLib 字节码增强和动态语言外，常见的还有，大量 JSP 或动态产生 JSP  文件的应用（远古时代的传统软件行业可能会有）、基于 OSGi 的应用（即使同一个类文件，被不同的加载器加载也会视为不同的类）等。</p><p>方法区在 JDK8 中一般不太容易产生，HotSpot 提供了一些参数来设置元空间，可以起到预防作用:</p><p><code>-XX:MaxMetaspaceSize </code>设置元空间最大值，默认是 -1，表示不限制（还是要受本地内存大小限制的）</p><p><code>-XX:MetaspaceSize </code>指定元空间的初始空间大小，以字节为单位，达到该值就会触发 GC 进行类型卸载，同时收集器会对该值进行调整</p><p><code>-XX:MinMetaspaceFreeRatio</code> 在 GC 之后控制最小的元空间剩余容量的百分比，可减少因元空间不足导致的垃圾收集频率，类似的还有<code>MaxMetaspaceFreeRatio</code></p><h3 id="Requested-array-size-exceeds-VM-limit"><a href="#Requested-array-size-exceeds-VM-limit" class="headerlink" title="Requested array size exceeds VM limit"></a>Requested array size exceeds VM limit</h3><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[Integer.MAX_VALUE];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Requested array size exceeds VM limit<br></code></pre></td></tr></table></figure><h4 id="原因分析-5"><a href="#原因分析-5" class="headerlink" title="原因分析"></a>原因分析</h4><ol><li>JVM 限制了数组的最大长度，该错误表示程序请求创建的数组超过最大长度限制。</li><li>JVM 在为数组分配内存前，会检查要分配的数据结构在系统中是否可寻址，通常为<code> Integer.MAX_VALUE-2</code>。</li></ol><h4 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>此类问题比较罕见，通常需要检查代码，<strong>确认业务是否需要创建如此大的数组，是否可以拆分为多个块，分批执行</strong>。</li></ol><h3 id="Out-of-swap-space"><a href="#Out-of-swap-space" class="headerlink" title="Out of swap space"></a>Out of swap space</h3><p><strong>启动 Java 应用程序会分配有限的内存</strong>。此限制是通过<code>-Xmx</code>和其他类似的启动参数指定的。</p><p><span style="color:blue"><strong>在 JVM 请求的总内存大于可用物理内存的情况下，操作系统开始将内容从内存换出到硬盘驱动器</strong>。</span></p><p><img src="https://p.ipic.vip/8yblp0.jpg" alt="java 9种常见的OOM场景——原因分析及解决方案_Java教程_06"></p><p>该错误表示所有可用的虚拟内存已被耗尽。虚拟内存（Virtual Memory）由物理内存（Physical Memory）和交换空间（Swap Space）两部分组成。</p><h3 id="Kill-process-or-sacrifice-child"><a href="#Kill-process-or-sacrifice-child" class="headerlink" title="Kill process or sacrifice child"></a>Kill process or sacrifice child</h3><p>操作系统是建立在流程概念之上的。这些进程由几个内核作业负责，其中一个名为“ Out of memory Killer”，它会在可用内存极低的情况下“杀死”（kill）某些进程。OOM Killer 会对所有进程进行打分，然后将评分较低的进程“杀死”，具体的评分规则可以参考 Surviving the Linux OOM Killer。</p><p>不同于其他的 OOM 错误， Killprocessorsacrifice child 错误不是由 JVM 层面触发的，而是由操作系统层面触发的。</p><h4 id="原因分析-6"><a href="#原因分析-6" class="headerlink" title="原因分析"></a>原因分析</h4><p>默认情况下，<strong>Linux 内核允许进程申请的内存总量大于系统可用内存</strong>，通过这种“错峰复用”的方式可以更有效的利用系统资源。</p><p>然而，这种方式也会无可避免地带来一定的“<strong>超卖</strong>”风险。例如某些进程持续占用系统内存，然后导致其他进程没有可用内存。此时，<strong>系统将自动激活 OOM Killer，寻找评分低的进程，并将其“杀死”，释放内存资源</strong>。</p><h4 id="解决方案-7"><a href="#解决方案-7" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li>升级服务器配置&#x2F;隔离部署，避免争用</li><li>OOM Killer 调优。</li></ol><p><img src="https://p.ipic.vip/pnnftr.jpg" alt="java 9种常见的OOM场景——原因分析及解决方案_Java开发_08"></p><h3 id="搬运地址"><a href="#搬运地址" class="headerlink" title="搬运地址"></a>搬运地址</h3><p>本文内容引用以下大佬的文章，仅供学习参考，非赢利性质，如有侵权，请联系删除。</p><p><a href="https://blog.51cto.com/u_15257216/2861461">https://blog.51cto.com/u_15257216/2861461</a></p><p>希望小伙伴们能够自己撸一遍，也熟悉一下OOM的几种常见情况，有助于我们编写优质的代码。</p>]]></content>
    
    
    <summary type="html">内存泄漏的最终结果会导致内存溢出</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://gcoder5.com/tags/Java/"/>
    
    <category term="安全" scheme="https://gcoder5.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java中的内存泄漏和内存溢出_上</title>
    <link href="https://gcoder5.com/2023/03/04/Java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA_%E4%B8%8A/"/>
    <id>https://gcoder5.com/2023/03/04/Java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA_%E4%B8%8A/</id>
    <published>2023-03-04T12:29:28.000Z</published>
    <updated>2023-03-11T06:17:18.981Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们的目的很纯粹，就是来讲一下内存泄漏（<strong>memory leak</strong>）和内存溢出（<strong>out of memory</strong>）。很多时候，我们会听到这两个名词，但是系统的全面的了解却不多，所以今天我们就一起来学习学习。</p><h3 id="JVM如何判断对象是否健在"><a href="#JVM如何判断对象是否健在" class="headerlink" title="JVM如何判断对象是否健在"></a>JVM如何判断对象是否健在</h3><p>在讲内存之前呢，我们首先要知道这么一个问题：JVM是如何知道某个对象是否还健在的呢？我们都知道Java对象主要是存放在Java堆里的，所以当我们的GC（垃圾收集器）在对Java堆进行回收前，需要先确定这些对象是否还“存活”，哪些已经“死去”（不再被引用）。</p><p>下面我们就来讲几种用来判断对象是否健在的算法</p><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p><strong>对象中添加一个引用计数器，每有一个地方引用它时，计数器值就加一；当引用失效是，计数器值就减一；任何时刻计数器为零的对象就是不可以能再被使用的对象</strong>。</p><p>该算法的原理简单，判定效率高，但是我们目前主流的JVM并没有选用此算法来管理内存，主要是因为使用该算法时，需要配合大量的额外处理才能确保正确的工作，例如要解决<strong>对象之间的相互循环引用</strong>的问题，我们可以通过下面的代码例子来解答为啥不用的疑惑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemoryTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MyTest</span> <span class="hljs-variable">myTest1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTest</span>();<br>        <span class="hljs-type">MyTest</span> <span class="hljs-variable">myTest2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTest</span>();<br><br>        myTest1.myTest = myTest2;<br>        myTest2.myTest = myTest1;<br><br>        myTest1 = <span class="hljs-literal">null</span>;<br>        myTest2 = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">// 假设在这行发生GC，test1和test2是否能被回收？</span><br>        System.gc();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">MyTest</span> <span class="hljs-variable">myTest</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析代码，myTest1和myTest2对象都被设置成了null，在后面发生GC的时候，如果按照引用计数算法，这两个对象虽然都被设置成了null，但是<strong>myTest1引用了myTest2，myTest2又引用了myTest1，所以这两个对象的引用计数值都不为0，所以都不会被回收</strong>，但是真正的实际运行结果是，这两个对象都被回收了，这也说明HotSpot虚拟机并不是用引用计数法来进行的内存管理。</p><p>那JVM用的是什么算法吗？我们继续往下看…</p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>这个算法的基本思路就是通过一一系列称为<code>GC Roots</code> 的根对象作为起始节点集，从这些节点开始根据引用关系向下搜索，搜索走过的的路径称为“<strong>引用链</strong>”（Reference Chain）,如果某个对象到<code>GC Roots </code>间没有任何引用链相连，或者从<code>GC Roots</code> 到这个对象不可达时，则证明此对象是不可能再被使用的。</p><p><span style="color:blue"><strong>当前主流的商用程序语言（Java、C#等），都是通过可达性分析（Reachability Analysis）算法来判断对象是否存活的。</strong></span></p><p>我们可以来看下下面的图，<strong>虽然object10、object11、object12互相有关联，但是它们到GC Roots是不可达的，因此它们会被判定为可回收的对象。</strong></p><p><img src="https://p.ipic.vip/v4cky0.png" alt="可达性分析算法"></p><p>在Java程序中，固定可作为GC Roots 的对象包括以下几种：</p><ol><li><p>虚拟机栈中引用的对象</p><p>比如：各个线程被调用的方法中使用到的参数、局部变量等。</p></li><li><p>本地方法栈内JNI（通常说的本地方法）引用的对象</p></li><li><p>方法区中类静态属性引用的对象</p><p>比如：Java类的引用类型静态变量</p></li><li><p>方法区中常量引用的对象</p><p>比如：字符串常量池（string Table） 里的引用</p></li><li><p>所有被同步锁synchronized持有的对象</p></li><li><p>Java虚拟机内部的引用</p><p>比如：基本数据类型对应的Class对象，一些常驻的异常对象（如：NullPointerException、OutOfMemoryError） ，系统类加载器。</p></li><li><p>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</p></li><li><p>除了这些固定的GCRoots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。</p><p>比如：分代收集和局部回收（Partial GC）</p></li></ol><p>通过对上面两种算法的介绍，实际上在我们判断一个对象是否存在的依据，离不开这个对象是否被<strong>引用</strong>离不开关系。</p><p>在JDK1.2之前，Java对引用的概念是：如果reference类型的数据中存储的数值代表的是另外一块儿内存的地址，就称该reference数据是代表某块内存、某个对象的引用</p><p>在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为<code>强引用（Strongly Reference）</code>、<code>软引用（Soft Reference）</code>、<code>弱引用（Weak Reference）</code>、<code>虚引用（Phantom Reference）</code>4种，*<em>这4种引用强度依次逐渐减弱</em></p><p>对于这四种不同的引用方式，我们做一个基本的介绍：</p><p><img src="/Java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%EF%BC%88%E4%B8%8A%EF%BC%89/%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png" alt="引用类型"></p><ol><li><p><strong>强引用</strong>是传统“引用”的定义，指引用复制，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br></code></pre></td></tr></table></figure><p>这种引用关系。无论在任何情况下，<strong>只要强引用关系还存在，垃圾收集器就不会回收掉被引用的对象</strong>。</p></li><li><p><strong>软引用</strong>是用来描述一些还有用，但非必须的对象。在系统发生内存溢出前，会先对软引用对象进行第二次回收，如果回收后还没有足够的内存，才会抛出内存溢出的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">ReferenceQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>();<br><span class="hljs-type">SoftReference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>(obj, queue);<br><span class="hljs-comment">// 强引用对象滞空，保留软引用</span><br>obj = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>弱引用</strong>也是用来描述那些非必须的对象，但是它的强度比软引用更弱一些，弱引用的对象，只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p><p>而<strong>弱引用和软引用的区别</strong>在于：弱引用的对象拥有更短的生命周期，只要垃圾回收器扫描到它，不管内存空间充足与否，都会回收它的内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">ReferenceQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>();<br><span class="hljs-type">WeakReference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>(obj, queue);<br><span class="hljs-comment">//强引用对象滞空，保留软引用</span><br>obj = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>虚引用</strong>也称为“幽灵引用”或“幻影引用”，它是最弱的一种引用关系。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。</p></li></ol><p>综上来理解的话，通过定义四种引用类型以及可达性分析算法来判断对象是否健在。但是，是不是被可达性分析算法判断为不可达对象就“非死不可”了，实际上，要真正回收一个对象，是需要至少经历两次标记过程：</p><ol><li>如果第一次对象在进行可达性分析后发现与GC Roots 不可达，将进行第一次标记。</li><li>随后对此对象进行一次是否有必要执行<code>finalize()</code>方法进行筛选，假如对象没有覆盖<code>finalize()</code>方法，或者<code>finalize()</code>方法已经被虚拟机调用过，都视为“没有必要执行”。</li></ol><blockquote><p>如果对象被判定有必要执行finalize()方法，会将对象放置在一个名为F-Queue的队列中，并在由一条由虚拟机自动建立的、低调度的线程区执行它们的finalize()方法。但并不承诺一定会等待它们运行结束。</p></blockquote><p><span style="color:red"><strong>注意事项：</strong></span>任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临第二次回收，它的finalize()方法不会被再次执行。<br><strong>还有一点就是Java官方已经明确声明不推荐手动调用finalize()方法了，因为它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序，并且finanlize()能做的所有工作，使用try-finally或其他方式都可以做的更好、更及时。</strong></p><h3 id="什么是内存泄漏（memory-leak）"><a href="#什么是内存泄漏（memory-leak）" class="headerlink" title="什么是内存泄漏（memory leak）"></a>什么是内存泄漏（memory leak）</h3><p>学习完了上面的对象回收之后，我们接下来就讲一下什么是内存泄漏。</p><p>在用可达性分析算法判断对象是否是不再使用的对象时，本质都是判断一个对象是否还被引用。那么对于这种情况下，由于代码的实现不同就会出现很多内存泄漏问题（让JVM误以为此对象还在引用中，无法回收，造成内存泄漏）。</p><p>主要关注两点：</p><ol><li>是否还被使用？是</li><li>是否还被需要？否</li></ol><h3 id="内存泄漏（memory-leak）的理解"><a href="#内存泄漏（memory-leak）的理解" class="headerlink" title="内存泄漏（memory leak）的理解"></a>内存泄漏（memory leak）的理解</h3><p>严格来说，只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄漏。但实际情况很多时候一些不太好的实践（或疏忽）才导致对象的生命周期变得很长甚至导致OOM，也可以叫做宽泛意义上的“内存泄漏”。</p><h3 id="内存泄漏和内存溢出的关系"><a href="#内存泄漏和内存溢出的关系" class="headerlink" title="内存泄漏和内存溢出的关系"></a>内存泄漏和内存溢出的关系</h3><p>内存泄漏（memory leak）就是<strong>占着茅坑不拉屎</strong>，明明申请了内存并使用完了但是就是不释放掉。比如一共有1024M的内存，分配了512M的内存一直不回收，那么可用的内存就只有512M了，仿佛漏掉了一部分。</p><p>内存溢出（out of memory）就是申请内存的时候，没有足够的内存可以使用。通俗一点儿讲，一个厕所就三个坑，有两个站着茅坑不走的（内存泄漏），剩下最后一个坑，厕所表示接待压力很大，这时候一下子来了两个人，坑位（内存）就不够了，内存泄漏变成了内存溢出了。</p><p>所以，内存泄漏的增多，最终会导致内存溢出。</p><h3 id="内存泄漏的分类"><a href="#内存泄漏的分类" class="headerlink" title="内存泄漏的分类"></a>内存泄漏的分类</h3><ol><li>经常发生：发生内存泄漏的代码会被多次执行，每次执行，泄漏一块内存；</li><li>偶然发生：在某些特定情况下才会发生；</li><li>一次性：发生内存泄漏的方法只会执行一次；</li><li>隐式泄漏：一直占着内存不释放，直到执行结束；严格的说这个不算内存泄漏，因为最终释放掉了。</li></ol><h3 id="常见的内存泄漏8种情况"><a href="#常见的内存泄漏8种情况" class="headerlink" title="常见的内存泄漏8种情况"></a>常见的内存泄漏8种情况</h3><h4 id="1-静态集合类"><a href="#1-静态集合类" class="headerlink" title="1.静态集合类"></a>1.静态集合类</h4><p>静态集合类，如HashMap、LinkedList等等。<strong>如果这些容器为静态的，那么它们的声明周期与JVM程序一致，则容器中的对象在程序结束之前将不能被释放，从而造成内存泄漏</strong>。简单而言，长生命周期的对象有短生命周期对象的引用，尽管短生命周期的对象不再使用，但是因为长生命周期对象持有它的引用而导致不能被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemoryLeak</span> &#123;<br>   <span class="hljs-keyword">static</span> <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">oomTests</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<span class="hljs-comment">// 局部变量</span><br>       list.add(obj);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-各种连接使用后未关闭"><a href="#2-各种连接使用后未关闭" class="headerlink" title="2.各种连接使用后未关闭"></a>2.<strong>各种连接使用后未关闭</strong></h4><p>如数据库连接、网络 http 连接、io 连接等等。当程序操作数据库时，首先应该建立数据库的连接 Connection，操作语句时建立 Statement 对象，获取结果集建立 ResultSet 对象，之后需要显示的调用 close 方法来关闭连接，只有关闭连接后，GC 才会对对应的未使用对象进行回收。<strong>没有及时的关闭数据库连接，会导致大量对象长期占用内存空间，导致内存泄漏</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>   <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-变量的作用域不合理"><a href="#3-变量的作用域不合理" class="headerlink" title="3.变量的作用域不合理"></a>3.<strong>变量的作用域不合理</strong></h4><p>如本该唯一定义在某方法的变量定义在了全局变量。一般来讲，<strong>一个变量的作用范围大于其所被使用的范围，可能发生内存泄漏</strong>，表现在存在时间大于使用时间，即使用完了但是还不能被回收，就比如下面的列子。另外，如果没有及时的将未使用的对象置 null，也有可能导致内存泄漏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.gcoder.common.core;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 内存泄漏例子</span><br><span class="hljs-comment"> * 这里的变量 info 在方法 receiveAndSaveInfo 中进行赋值和保存，在该方法执行完毕后本应该被 GC 回收，</span><br><span class="hljs-comment"> * 但由于全局变量的生命周期是跟随对象的，所有当方法执行完不能被回收，可能造成内存泄漏。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> gcoder</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoMemoryLeak</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String info;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveAndSaveInfo</span><span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-comment">// 模拟接受消息</span><br>        receiveInfo();<br>        <br>        <span class="hljs-comment">// 模拟存储消息</span><br>        saveInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-内部类持有外部类"><a href="#4-内部类持有外部类" class="headerlink" title="4.内部类持有外部类"></a>4.<strong>内部类持有外部类</strong></h4><p>如果一个外部类的实例对象的方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持有外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄露。</p><h4 id="5-改变哈希值"><a href="#5-改变哈希值" class="headerlink" title="5.改变哈希值"></a>5.改变哈希值</h4><p>当一个对象被存储进 HashSet 集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了，否则，对象修改后的哈希值与最初存储进 HashSet 集合中时的哈希值就不同了，在这种情况下，即使在 contains 方法使用该对象的当前引用作为的参数去 HashSet 集合中检索对象，也将返回找不到对象的结果，这也会导致无法从 HashSet 集合中单独删除当前对象，造成内存泄露。</p><h4 id="6-栈引起的内存泄漏"><a href="#6-栈引起的内存泄漏" class="headerlink" title="6.栈引起的内存泄漏"></a>6.<strong>栈引起的内存泄漏</strong></h4><p>我们可以编辑一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoMemoryLeak</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">private</span> Object[] elements;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DemoMemoryLeak</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[DEFAULT_INITIAL_CAPACITY];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 进栈</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o o</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gaohuiwu</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-03-05</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Object o)</span> &#123;<br>        ensureCapacity();<br>        elements[size++] = o;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 出栈</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> lang.Object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gaohuiwu</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-03-05</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmptyStackException</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> elements[--size];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扩容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> gaohuiwu</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2023-03-05</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (elements.length == size) &#123;<br>            elements = Arrays.copyOf(elements, size * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段模拟栈操作的代码存在隐蔽的内存泄漏问题。定位到pop()函数，在return语句中，当我们弹出一个元素时，只是简单的让栈顶指针（size）-1。逻辑上，栈中的这个元素已经弹出，已经没有用了。但是事实上，<strong>被弹出的元素依然存在于elements数组中</strong>，它依然被elements数组所引用，GC是无法回收被引用着的对象的。也许你期望等这整个栈失去引用（将被GC回收时），栈内的elements数组一起被GC回收。但是实际的使用过程中，又有谁能够预料到这个栈会存活多长时间。为了保险起见，我们需要在弹出一个元素的时候，就让这个元素失去引用，便于GC回收。我们只需要让Pop()函数弹出时，同时解除对弹出元素的引用即可。</p><h4 id="7-缓存泄漏"><a href="#7-缓存泄漏" class="headerlink" title="7.缓存泄漏"></a>7.缓存泄漏</h4><p>内存泄漏的另一个常见来源是缓存，一旦你把对象引用放入到缓存中，他就很容易遗忘，对于这个问题，可以使用<code>WeakHashMap</code>代表缓存，此种Map的特点是，当除了自身有对key的引用外，此key没有其他引用那么此map会自动丢弃此值。</p><h4 id="8-监听器和回调"><a href="#8-监听器和回调" class="headerlink" title="8.监听器和回调"></a>8.监听器和回调</h4><p>内存泄漏第三个常见来源是监听器和其他回调，如果客户端在你实现的API中注册回调，却没有显示的取消，那么就会积聚。需要确保回调立即被当作垃圾回收的最佳方法是只保存他的若引用，例如将他们保存成为WeakHashMap中的键。</p><h3 id="预防内存泄漏的方法"><a href="#预防内存泄漏的方法" class="headerlink" title="预防内存泄漏的方法"></a>预防内存泄漏的方法</h3><ol><li>尽量减少使用静态变量，或者使用完及时赋值为 null</li><li>明确内存对象的有效作用域，<strong>尽量缩小对象的作用域</strong>，能用局部变量处理的不用成员变量，因为局部变量弹栈会自动回收</li><li>减少长生命周期的对象持有短生命周期的引用</li><li>使用 <code>StringBuilder</code> 和<code>StringBuffer</code>进行字符串连接，<code>Sting</code> 和<code> StringBuilder</code> 以及 <code>StringBuffer </code>等都可以代表字符串，其中 <code>String </code>字符串代表的是不可变的字符串，后两者表示可变的字符串。如果使用多个<code>String</code>对象进行字符串连接运算，在运行时可能产生大量临时字符串，这些字符串会保存在内存中从而导致程序性能下降</li><li>对于不需要使用的对象手动设置 null 值，不管 GC 何时会开始清理，我们都<strong>应及时的将无用的对象标记为可被清理的对象</strong></li><li>各种连接（数据库连接，网络连接，IO连接）操作，务必显示调用close关闭</li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本文我们一起学习了jvm的回收机制和内存泄漏的一些场景和预防措施，那么下个篇幅，我们就来讲讲所谓的内存溢出～</p><hr><p>我是Gcoder，一个热爱学习的Java跑马选手。</p>]]></content>
    
    
    <summary type="html">敲一段代码很简单，但是要敲好代码并不容易。今天我们来讲关于内存这一块～</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://gcoder5.com/tags/Java/"/>
    
    <category term="安全" scheme="https://gcoder5.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>认识下Java8的日期时间类</title>
    <link href="https://gcoder5.com/2023/03/03/%E8%AE%A4%E8%AF%86%E4%B8%8BJava8%E7%9A%84%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%B1%BB/"/>
    <id>https://gcoder5.com/2023/03/03/%E8%AE%A4%E8%AF%86%E4%B8%8BJava8%E7%9A%84%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%B1%BB/</id>
    <published>2023-03-03T15:19:25.000Z</published>
    <updated>2023-03-04T04:44:59.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术是无止境的，这些年搁置了博客。但没忘记学习，这段时间先把之前的笔记更新出来，此后我们再一道来谈谈近些年的一些新玩意儿！</p></blockquote><h3 id="从Date类开始讲起"><a href="#从Date类开始讲起" class="headerlink" title="从Date类开始讲起"></a>从Date类开始讲起</h3><p>Date这个类，我们应该都不陌生，因为我们经常用<code>new Date()</code>来获取当前的时间。而对于Date类来说呢，我们需要有这么两个认知。</p><ol><li><p>Date不存在时区的问题，也就是说<strong>世界上的任何一台计算机编写<code>new Date()</code>执行之后得到的都是同样的时间</strong>。</p><p>原因我也解释一下，因为Date中保存的是<code>UTC</code>时间，<code>UTC</code>时间是以原子钟为基础的统一时间，不以时间参照计时，所以不存在时区的划分。</p></li><li><p>Date中保存的是一个时间戳，代表的是从1970年1月1日0点（Epoch时间）到现在的毫秒数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">0</span>));<br>System.out.println(TimeZone.getDefault().getID() + <span class="hljs-string">&quot;:&quot;</span> + TimeZone.getDefault().getRawOffset()/<span class="hljs-number">3600000</span>);<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输出内容</span><br>Thu Jan 01 08:00:00 CST 1970<br>Asia/Shanghai:8<br></code></pre></td></tr></table></figure></li></ol><h3 id="日期时间该怎么保存呢"><a href="#日期时间该怎么保存呢" class="headerlink" title="日期时间该怎么保存呢"></a>日期时间该怎么保存呢</h3><p>因为有时区的影响，所以对于不同的日期形式有不同的方式来进行保存。</p><ol><li><p>以UTC保存，保存的时间没有时区属性，是不涉及时区时间差问题的世界统一时间。<strong>时间戳</strong>或Java中的<strong>Date类</strong>就是这种方式，也是推荐的方式。</p></li><li><p>以字符串的形式保存，比如年&#x2F;月&#x2F;日 时:分:秒，一定要同时<strong>保存时区信息</strong>。</p><p>有时区信息，才能知道这个字符串时间真正的时间点。Calendar 是有时区概念的，所以我们通过不同的时区初始化 Calendar，得到了不同的时间。</p></li></ol><h3 id="关于字符串和Date的相互转换"><a href="#关于字符串和Date的相互转换" class="headerlink" title="关于字符串和Date的相互转换"></a>关于字符串和Date的相互转换</h3><ol><li><p>对于同一个时间表示，比如2023-03-03 22:00:00，不同时区的人转换成Date会得到不同的时间（时间戳）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">stringDate</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023-03-03 22:00:00&quot;</span>;<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">inputFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-comment">// 默认时区解析时间表示</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> inputFormat.parse(stringDate);<br>System.out.println(date1 + <span class="hljs-string">&quot;:&quot;</span> + date1.getTime());<br><span class="hljs-comment">// 纽约时区解析时间表示</span><br>inputFormat.setTimeZone(TimeZone.getTimeZone(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>));<br><span class="hljs-type">Date</span> <span class="hljs-variable">date2</span> <span class="hljs-operator">=</span> inputFormat.parse(stringDate);<br>System.out.println(date2 + <span class="hljs-string">&quot;:&quot;</span> + date2.getTime());<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输出内容</span><br>Fri Mar 03 22:00:00 CST 2023:1677852000000<br>Fri Mar 03 22:00:00 CST 2023:1677852000000<br></code></pre></td></tr></table></figure></li><li><p>不同时区下格式化得到的不同的时间表示，比如当前时区和纽约时区的时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">stringDate</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023-03-03 22:00:00&quot;</span>;<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">inputFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> inputFormat.parse(stringDate);<br><span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;[yyyy-MM-dd HH:mm:ss Z]&quot;</span>).format(date1);<br>System.out.println( format);<br>TimeZone.setDefault(TimeZone.getTimeZone(<span class="hljs-string">&quot;America/New_York&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">format1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;[yyyy-MM-dd HH:mm:ss Z]&quot;</span>).format(date1);<br>System.out.println(format1);<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[2023-03-03 22:00:00 +0800]<br>[2023-03-03 09:00:00 -0500]<br></code></pre></td></tr></table></figure><p><span style="color:red"><strong>注意事项：</strong></span>有时候数据库相同的时间，由于<strong>服务器的时区</strong>设置不同，读取到的时间表示不同。这正是时区发挥作用了，因为UTC时间需要根据当前时区解析正确的本地时间。</p></li></ol><h3 id="Java8的时间日期类"><a href="#Java8的时间日期类" class="headerlink" title="Java8的时间日期类"></a>Java8的时间日期类</h3><p>对于Java8而言，Java8对于日期的处理发生了巨大的改变，以下我们就一起来学习一下。</p><ol><li><p>初始化时区的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化标准的时区</span><br>ZoneId.of(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br><span class="hljs-comment">// 初始化一个具有指定时间差的自定义时区</span><br>ZoneOffset.ofHour()<br></code></pre></td></tr></table></figure></li><li><p><code>LocalDateTime</code>不带有时区属性，所以它只是一个时间表示，命名为本地时区的日期时间；ZonedDateTime&#x3D;LocalDateTime+ZoneId，具有时区性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> ZonedDateTime.of(LocalDateTime.parse(stringDate, dateTimeFormatter), timeZoneJST);<span class="hljs-comment">//使用DateTimeFormatter格式化时间，可以通过withZone方法直接设置格式化使用的时区DateTimeFormatter outputFormat = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss Z&quot;);System.out.println(timeZoneSH.getId() + outputFormat.withZone(timeZoneSH).format(date));System.out.println(timeZoneNY.getId() + outputFormat.withZone(timeZoneNY).format(date));System.out.println(timeZoneJST.getId() + outputFormat.withZone(timeZoneJST).format(date));</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>DateTimeFormatter</code>格式化时间的时候，可以直接通过withZone方法直接设置格式化使用的时区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(timeZoneJST.getId() + outputFormat.withZone(timeZoneJST).format(date));<br></code></pre></td></tr></table></figure><p><span style="color:red"><strong>注意事项：</strong></span>要正确处理国际化时间问题，使用Java8的日期时间类，即使用ZonedDateTime保存时间，然后使用设置了ZoneId的DateTimeFormatter配合ZonedDateTime进行时间格式化得到本地时间表示。</p></li></ol><h3 id="不建议继续使用SimpleDateFormat"><a href="#不建议继续使用SimpleDateFormat" class="headerlink" title="不建议继续使用SimpleDateFormat"></a>不建议继续使用<code>SimpleDateFormat</code></h3><h4 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h4><p>在我们对于日期进行格式化的时候，在Java8之前我们经常用使用<code>SimpleDateFormat</code>来进行格式化，实际上<code>SimpleDateFormat</code>是线程不安全的，所以并不推荐使用。</p><p>我们可以通过源码来解读下为啥<code>SimpleDateFormat</code>是线程不安全的。首先，我们目光聚焦到官网的一段话：</p><blockquote><p>Synchronization<br>Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally.</p></blockquote><p>大致意思就是说：这个玩意儿线程不安全，如果要用在多线程，最好是每个线程有各自的<code>SimpleDateFormat</code>对象；如果在并发环境下使用SimpleDateFormat对象，需要进行同步串行。</p><p>下面，我们一起来看下源码，正常情况，我们使用<code>parse()</code>和<code>format()</code>两个函数比较多，所以我们那就来看看关于这两个函数的实现</p><p><code>SimpleDateFormat</code>的<code>parse()</code>局部源码</p><p><img src="https://p.ipic.vip/gkxat4.png" alt="image-20230304000439390"></p><p><code>SimpleDateFormat</code>的<code>format()</code>局部源码</p><p><img src="https://p.ipic.vip/w5aa4n.png" alt="image-20230304000547953"></p><p>从上面的两个函数的局部代码，我们可以看到两函数有共用一个成员变量<code>calendar</code>，那么这个变量是怎么定义的呢？实际上，它是父类<code>DateFormat</code>的一个普通的成员变量。</p><p><img src="https://p.ipic.vip/28kh4z.png" alt="image-20230304000741733"></p><p>综上，parse与format方法，是共用一个calendar成员变量的，所以如果多线程共用SimpleDateFormat对象，即使A线程做format操作，B线程做parse操作，也会存在并发问题，所以它是线程不安全的。</p><p>假如我们真的需要使用到<code>SimpleDateFormat</code>，那我们可以定义一个线程变量来解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; threadSafeSimpleDateFormat = ThreadLocal.withInitial(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="转换太宽容"><a href="#转换太宽容" class="headerlink" title="转换太宽容"></a>转换太宽容</h4><p>为什么说<code>SimpleDateFormat</code>转换太宽容，那是因为尽管需要解析的字符串和<code>SimpleDateFormat</code>指定的格式不匹配，但是其进行转换后还是能够得到结果，这样会导致我们在业务处理上，获取到错误的结果，从而引发难以定位的业务异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 例：用yyyyMM来解析20230303字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">dateString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;20230303&quot;</span>;<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">dateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyyMM&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;result:&quot;</span> + dateFormat.parse(dateString));<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">原因是把0303当成了月份，相当于25年(303/12)</span><br>result:Sun Mar 01 00:00:00 CST 2048<br></code></pre></td></tr></table></figure><h3 id="Java8是如何规避SimleDateFormat的坑"><a href="#Java8是如何规避SimleDateFormat的坑" class="headerlink" title="Java8是如何规避SimleDateFormat的坑"></a>Java8是如何规避SimleDateFormat的坑</h3><p>Java8对日期进行格式化是用的<code>DateTimeFormatter</code>这个类来处理，而这个类也规避了<code>SimleDateFormat</code>带来的问题。</p><ol><li><p>使用 <code>DateTimeFormatterBuilder</code> 来定义格式化字符串，不用去记忆使用大写的 Y 还是小写的 Y，大写的 M 还是小写的 m</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTimeFormatterBuilder</span>()<br>        .appendValue(ChronoField.YEAR) <span class="hljs-comment">//年</span><br>        .appendLiteral(<span class="hljs-string">&quot;/&quot;</span>)<br>        .appendValue(ChronoField.MONTH_OF_YEAR) <span class="hljs-comment">//月</span><br>        .appendLiteral(<span class="hljs-string">&quot;/&quot;</span>)<br>        .appendValue(ChronoField.DAY_OF_MONTH) <span class="hljs-comment">//日</span><br>        .appendLiteral(<span class="hljs-string">&quot; &quot;</span>)<br>        .appendValue(ChronoField.HOUR_OF_DAY) <span class="hljs-comment">//时</span><br>        .appendLiteral(<span class="hljs-string">&quot;:&quot;</span>)<br>        .appendValue(ChronoField.MINUTE_OF_HOUR) <span class="hljs-comment">//分</span><br>        .appendLiteral(<span class="hljs-string">&quot;:&quot;</span>)<br>        .appendValue(ChronoField.SECOND_OF_MINUTE) <span class="hljs-comment">//秒</span><br>        .appendLiteral(<span class="hljs-string">&quot;.&quot;</span>)<br>        .appendValue(ChronoField.MILLI_OF_SECOND) <span class="hljs-comment">//毫秒</span><br>        .toFormatter();<br></code></pre></td></tr></table></figure></li><li><p>DateTimeFormatter 是线程安全的，可以定义为 static 使用</p></li><li><p>DateTimeFormatter 的解析比较严格，需要解析的字符串和格式不匹配时，会直接报错，而不会把 0303 解析为月份</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用刚才定义的DateTimeFormatterBuilder构建的DateTimeFormatter来解析这个时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.parse(<span class="hljs-string">&quot;2023/3/3 12:00:00.789&quot;</span>, dateTimeFormatter);<br><span class="hljs-comment">// 解析成功</span><br>System.out.println(localDateTime.format(dateTimeFormatter));<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">2023/3/3 12:0:0.789<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用yyyyMM格式解析20230303是否可以成功呢？</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;20230303&quot;</span>;<br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyyMM&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result:&quot;</span> + dateTimeFormatter.parse(dt));<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Exception in thread &quot;main&quot; java.time.format.DateTimeParseException: Text &#x27;20230303&#x27; could not be parsed at index 0<br>at java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:1949)<br>at java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1777)<br>at com.tansun.MySqlCall.main(MySqlCall.java:121)<br></code></pre></td></tr></table></figure></li></ol><h3 id="Java8日期时间的计算"><a href="#Java8日期时间的计算" class="headerlink" title="Java8日期时间的计算"></a>Java8日期时间的计算</h3><p>通常我们在日常开发中会需要对时间进行计算，比如算一下今天起之后30天的时间，一般而言，我们会直接把Date().getTime 方法得到的时间戳加 30 天对应的毫秒数，也就是 30 天 *1000 毫秒 *3600 秒 *24 小时。但是这样就导致时间计算的错误，因为int会溢出，所以我们需要将30修正为30L。</p><p>在Java8之前，我们要进行日期时间计算的话，更推荐用<code>Calendar</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>calendar.setTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>calendar.add(Calendar.DAY_OF_MONTH,<span class="hljs-number">30</span>);<br>System.out.println(calendar.getTime());<br></code></pre></td></tr></table></figure><p>接下来，我们就来说说Java8对日期时间的计算操作</p><ol><li><p>使用各种<code>minus</code>和<code>plus</code>方法直接对日期进行加减操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// minus-减  plus-加</span><br>System.out.println(<span class="hljs-string">&quot;测试操作日期&quot;</span>);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now()<br>     .minus(Period.ofDays(<span class="hljs-number">1</span>))<br>     .plus(<span class="hljs-number">12</span>, ChronoUnit.DAYS)<br>     .minusMonths(<span class="hljs-number">1</span>)<br>     .plus(Period.ofMonths(<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;localDate = &quot;</span> + localDate);<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">测试操作日期<br>localDate = 2023-03-15<br></code></pre></td></tr></table></figure></li><li><p>通过<code>with</code>方法进行快捷时间调节</p><ol><li>使用 TemporalAdjusters.firstDayOfMonth 得到当前月的第一天；</li><li>使用 TemporalAdjusters.firstDayOfYear() 得到当前年的第一天；</li><li>使用 TemporalAdjusters.previous(DayOfWeek.SATURDAY) 得到上一个周六；</li><li>使用 TemporalAdjusters.lastInMonth(DayOfWeek.FRIDAY) 得到本月最后一个周五。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;本月的第一天&quot;</span>);<br>System.out.println(LocalDate.now().with(TemporalAdjusters.firstDayOfMonth()));<br>System.out.println(<span class="hljs-string">&quot;今年的程序员日&quot;</span>);<br>System.out.println(LocalDate.now().with(TemporalAdjusters.firstDayOfYear()).plusDays(<span class="hljs-number">357</span>));<br>System.out.println(<span class="hljs-string">&quot;今天之前的一个周六&quot;</span>);<br>System.out.println(LocalDate.now().with(TemporalAdjusters.previous(DayOfWeek.SATURDAY)));<br>System.out.println(<span class="hljs-string">&quot;本月最后一个工作日&quot;</span>);<br>System.out.println(LocalDate.now().with(TemporalAdjusters.lastInMonth(DayOfWeek.FRIDAY)));<br></code></pre></td></tr></table></figure></li><li><p>直接使用lambda表达式进行自定义的时间调整。比如为当前时间增加100以内的随机天数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(LocalDate.now().with(temporal -&gt; temporal.plus(ThreadLocalRandom.current().nextInt(<span class="hljs-number">100</span>), ChronoUnit.DAYS)));<br></code></pre></td></tr></table></figure></li><li><p>判断日期是否符合某个条件。比如自定义函数，判断指定日期是否是家庭成员的生日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title function_">isFamilyBirthday</span><span class="hljs-params">(TemporalAccessor date)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> date.get(ChronoField.MONTH_OF_YEAR);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> date.get(ChronoField.DAY_OF_MONTH);<br>        <span class="hljs-keyword">if</span> (month == Month.FEBRUARY.getValue() &amp;&amp; day == <span class="hljs-number">17</span>) &#123;<br>            <span class="hljs-keyword">return</span> Boolean.TRUE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (month == Month.SEPTEMBER.getValue() &amp;&amp; day == <span class="hljs-number">21</span>) &#123;<br>            <span class="hljs-keyword">return</span> Boolean.TRUE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (month == Month.MARCH.getValue() &amp;&amp; day == <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">return</span> Boolean.TRUE;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Boolean.FALSE;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;查询是否今天要举办生日&quot;</span>);<br><span class="hljs-comment">// 2023/3/4</span><br>System.out.println(LocalDate.now().query(MySqlCall::isFamilyBirthday));<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">查询是否今天要举办生日<br>true<br></code></pre></td></tr></table></figure></li></ol><h3 id="Java8日期时间处理的坑"><a href="#Java8日期时间处理的坑" class="headerlink" title="Java8日期时间处理的坑"></a>Java8日期时间处理的坑</h3><p>在我们使用Java8的Period计算两个日期差的时候，我们通过Period.between 得到了两个 LocalDate 的差，返回的是两个日期差几年零几月零几天。如果希望得知两个日期之间差几天，直接调用 Period 的 getDays() 方法得到的只是最后的“零几天”，而不是算总的间隔天数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;计算日期差&quot;</span>);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2023</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">otherDay</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2023</span>, <span class="hljs-number">10</span>, <span class="hljs-number">28</span>);<br>System.out.println(Period.between(otherDay,today).getDays());<br>System.out.println(Period.between(otherDay,today));<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">计算日期差<br>-24<br>P-7M-24D<br></code></pre></td></tr></table></figure><p>那对于这类问题，我们怎么处理呢？我们可以通过<code>ChronoUnit.DAYS</code>解决这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(ChronoUnit.DAYS.between(otherDay,today));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">238</span><br></code></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>在我们刚开始接触Java8的时候，可能会有些人认为<code>Date</code>就是Java8的<code>LocalDateTime</code>。其实并不是的，确实他们都没有时区概念，但是<code>java.util.Date</code>类是因为使用UTC表示，所以没有时区概念，其本质是<strong>时间戳</strong>。而<code>LocalDateTime</code>严格来说是日期时间的一种表示，而不是一个时间点。</p><p>所以，我们可以发现，当我们需要将<code>Date</code>转换成<code>LocalDateTime</code>时，需要通过<code>Date</code>的<code>toInstant</code>方法得到一个UTC时间戳进行转换，并需要提供当前的时区，这样才能将UTC时间转换成本地日期时间。</p><p>反过来，如果要将<code>LocalDateTime</code>的时间表示转化成<code>Date</code>时，需要提供时区，用于指定哪个时区的时间表示，也就是先通过<code>atZone</code>方法把<code>LocalDateTime</code>转换成<code>ZoneDateTime</code>，然后才能获取UTC时间戳。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());<br><span class="hljs-type">Date</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());<br>System.out.println(out);<br></code></pre></td></tr></table></figure><hr><p>我是Gcoder，一个热爱学习的Java跑马选手。</p>]]></content>
    
    
    <summary type="html">古往今来，Java的日期在Java8有何改变呢？</summary>
    
    
    
    <category term="技术" scheme="https://gcoder5.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://gcoder5.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>千回百转仍需坚守初心</title>
    <link href="https://gcoder5.com/2023/03/03/%E5%8D%83%E5%9B%9E%E7%99%BE%E8%BD%AC%E4%BB%8D%E9%9C%80%E5%9D%9A%E5%AE%88%E5%88%9D%E5%BF%83/"/>
    <id>https://gcoder5.com/2023/03/03/%E5%8D%83%E5%9B%9E%E7%99%BE%E8%BD%AC%E4%BB%8D%E9%9C%80%E5%9D%9A%E5%AE%88%E5%88%9D%E5%BF%83/</id>
    <published>2023-03-03T12:58:34.000Z</published>
    <updated>2023-03-03T14:14:11.324Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/%E5%8D%83%E5%9B%9E%E7%99%BE%E8%BD%AC%E4%BB%8D%E9%9C%80%E5%9D%9A%E5%AE%88%E5%88%9D%E5%BF%83/bird-7299650_960_720.jpg" alt="bird-7299650_960_720"></p><h3 id="一些想说的话"><a href="#一些想说的话" class="headerlink" title="一些想说的话"></a>一些想说的话</h3><p>人的惰性是越放肆越严重，距离上次的博客之旅一晃又过去了仨年。做人确实没有多少个三年可以浪费的，但是已逝年岁，不咎其责。生活本就是一次又一次的试错，一次又一次的探索，如果前进的方向错了，那停下来就是一种进步。</p><p>马上就要步入而立之年了，同时今年又完成了一件人生大事。迎来了自家的小公主，岁月好似春风一般，仿佛吹到了盛夏，又仿佛存在了一刹，从青葱到成熟，从人夫到人父，生命是一场奇妙之旅，但千回百转也仍需坚守初心。</p><p>每次的幡然醒悟，总会有一个生动的理由。上一次是一个深漂程序员在大城市的有感而发，想分享技术；而如今是一名新晋奶爸想在而立之年记录技术，把坚持和耐心教给我的小公主，做一个极佳的榜样。</p><h3 id="一些最近的感悟"><a href="#一些最近的感悟" class="headerlink" title="一些最近的感悟"></a>一些最近的感悟</h3><p>中年危机是真实存在的，在从事了五年多的开发之后，又遇到了形形色色的同行人或者同龄人。有的人因为资历和年限并不相符而被陷入困境；有的人或因固守成规或因锋芒毕露而寸步难行；也有的人资历尚浅但博学多才；更有甚者而立之年已一身荣耀。从前说，落后就要挨打，诚然这句话也适用于当今的IT圈。技术的日新月异，如同大浪淘沙般不断冲击，能够屹立不倒的人凤毛麟角，而这批人无一不是拥有不断保持学习，不断深入学习的良好品质。</p><p>初心是选择每一条道路的果决与勇敢，还有义无反顾。每条路都会有荆棘和诱惑，不忘初心者善，坚守初心者大善。兜兜转转，我们会在人生的道路上反复徘徊，有时候是不坚定，有时候是不断论证。终其一生，我们会不断完整自己的人生观和价值观。愿有一天，我们皆能得偿所愿。</p><h3 id="一些写在最后的祝福"><a href="#一些写在最后的祝福" class="headerlink" title="一些写在最后的祝福"></a>一些写在最后的祝福</h3><p>最后，兔年是个健康的开端，也是博客重新开始的时候，谨以此文祝福各位平安喜乐！</p>]]></content>
    
    
    <summary type="html">不忘初心方能无悔此行！</summary>
    
    
    
    <category term="杂谈" scheme="https://gcoder5.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="生活" scheme="https://gcoder5.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
